object "plonk_verifier" {
            code {
                function allocate(size) -> ptr {
                    ptr := mload(0x40)
                    if eq(ptr, 0) { ptr := 0x60 }
                    mstore(0x40, add(ptr, size))
                }
                let size := datasize("Runtime")
                let offset := allocate(size)
                datacopy(offset, dataoffset("Runtime"), size)
                return(offset, size)
            }
            object "Runtime" {
                code {
                    let success:bool := true
                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
                    function validate_ec_point(x, y) -> valid:bool {
                        {
                            let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            valid := and(x_lt_p, y_lt_p)
                        }
                        {
                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let is_affine:bool := eq(x_cube_plus_3, y_square)
                            valid := and(valid, is_affine)
                        }
                    }
                    mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x40, mod(calldataload(0x20), f_q))
mstore(0x60, mod(calldataload(0x40), f_q))
mstore(0x80, mod(calldataload(0x60), f_q))
mstore(0xa0, mod(calldataload(0x80), f_q))
mstore(0xc0, mod(calldataload(0xa0), f_q))
mstore(0xe0, mod(calldataload(0xc0), f_q))
mstore(0x100, mod(calldataload(0xe0), f_q))
mstore(0x120, mod(calldataload(0x100), f_q))
mstore(0x140, mod(calldataload(0x120), f_q))
mstore(0x160, mod(calldataload(0x140), f_q))
mstore(0x180, mod(calldataload(0x160), f_q))
mstore(0x1a0, mod(calldataload(0x180), f_q))
mstore(0x1c0, mod(calldataload(0x1a0), f_q))
mstore(0x1e0, mod(calldataload(0x1c0), f_q))
mstore(0x200, mod(calldataload(0x1e0), f_q))
mstore(0x220, mod(calldataload(0x200), f_q))
mstore(0x240, mod(calldataload(0x220), f_q))
mstore(0x260, mod(calldataload(0x240), f_q))
mstore(0x280, mod(calldataload(0x260), f_q))
mstore(0x2a0, mod(calldataload(0x280), f_q))
mstore(0x2c0, mod(calldataload(0x2a0), f_q))
mstore(0x2e0, mod(calldataload(0x2c0), f_q))
mstore(0x300, mod(calldataload(0x2e0), f_q))
mstore(0x320, mod(calldataload(0x300), f_q))
mstore(0x340, mod(calldataload(0x320), f_q))
mstore(0x360, mod(calldataload(0x340), f_q))
mstore(0x380, mod(calldataload(0x360), f_q))
mstore(0x3a0, mod(calldataload(0x380), f_q))
mstore(0x3c0, mod(calldataload(0x3a0), f_q))
mstore(0x0, 81650494002429099981106181405574903117641600021272722554141575772178195341)

        {
            let x := calldataload(0x3c0)
            mstore(0x3e0, x)
            let y := calldataload(0x3e0)
            mstore(0x400, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x420, keccak256(0x0, 1056))
{
            let hash := mload(0x420)
            mstore(0x440, mod(hash, f_q))
            mstore(0x460, hash)
        }

        {
            let x := calldataload(0x400)
            mstore(0x480, x)
            let y := calldataload(0x420)
            mstore(0x4a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x440)
            mstore(0x4c0, x)
            let y := calldataload(0x460)
            mstore(0x4e0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x500, keccak256(0x460, 160))
{
            let hash := mload(0x500)
            mstore(0x520, mod(hash, f_q))
            mstore(0x540, hash)
        }
mstore8(1376, 1)
mstore(0x560, keccak256(0x540, 33))
{
            let hash := mload(0x560)
            mstore(0x580, mod(hash, f_q))
            mstore(0x5a0, hash)
        }

        {
            let x := calldataload(0x480)
            mstore(0x5c0, x)
            let y := calldataload(0x4a0)
            mstore(0x5e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x4c0)
            mstore(0x600, x)
            let y := calldataload(0x4e0)
            mstore(0x620, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x500)
            mstore(0x640, x)
            let y := calldataload(0x520)
            mstore(0x660, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x680, keccak256(0x5a0, 224))
{
            let hash := mload(0x680)
            mstore(0x6a0, mod(hash, f_q))
            mstore(0x6c0, hash)
        }

        {
            let x := calldataload(0x540)
            mstore(0x6e0, x)
            let y := calldataload(0x560)
            mstore(0x700, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x580)
            mstore(0x720, x)
            let y := calldataload(0x5a0)
            mstore(0x740, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x5c0)
            mstore(0x760, x)
            let y := calldataload(0x5e0)
            mstore(0x780, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x600)
            mstore(0x7a0, x)
            let y := calldataload(0x620)
            mstore(0x7c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x7e0, keccak256(0x6c0, 288))
{
            let hash := mload(0x7e0)
            mstore(0x800, mod(hash, f_q))
            mstore(0x820, hash)
        }
mstore(0x840, mod(calldataload(0x640), f_q))
mstore(0x860, mod(calldataload(0x660), f_q))
mstore(0x880, mod(calldataload(0x680), f_q))
mstore(0x8a0, mod(calldataload(0x6a0), f_q))
mstore(0x8c0, mod(calldataload(0x6c0), f_q))
mstore(0x8e0, mod(calldataload(0x6e0), f_q))
mstore(0x900, mod(calldataload(0x700), f_q))
mstore(0x920, mod(calldataload(0x720), f_q))
mstore(0x940, mod(calldataload(0x740), f_q))
mstore(0x960, mod(calldataload(0x760), f_q))
mstore(0x980, mod(calldataload(0x780), f_q))
mstore(0x9a0, mod(calldataload(0x7a0), f_q))
mstore(0x9c0, mod(calldataload(0x7c0), f_q))
mstore(0x9e0, mod(calldataload(0x7e0), f_q))
mstore(0xa00, mod(calldataload(0x800), f_q))
mstore(0xa20, mod(calldataload(0x820), f_q))
mstore(0xa40, mod(calldataload(0x840), f_q))
mstore(0xa60, mod(calldataload(0x860), f_q))
mstore(0xa80, mod(calldataload(0x880), f_q))
mstore(0xaa0, keccak256(0x820, 640))
{
            let hash := mload(0xaa0)
            mstore(0xac0, mod(hash, f_q))
            mstore(0xae0, hash)
        }
mstore8(2816, 1)
mstore(0xb00, keccak256(0xae0, 33))
{
            let hash := mload(0xb00)
            mstore(0xb20, mod(hash, f_q))
            mstore(0xb40, hash)
        }

        {
            let x := calldataload(0x8a0)
            mstore(0xb60, x)
            let y := calldataload(0x8c0)
            mstore(0xb80, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xba0, keccak256(0xb40, 96))
{
            let hash := mload(0xba0)
            mstore(0xbc0, mod(hash, f_q))
            mstore(0xbe0, hash)
        }

        {
            let x := calldataload(0x8e0)
            mstore(0xc00, x)
            let y := calldataload(0x900)
            mstore(0xc20, y)
            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0x20)
x := add(x, shl(88, mload(0x40)))
x := add(x, shl(176, mload(0x60)))
mstore(3136, x)
let y := mload(0x80)
y := add(y, shl(88, mload(0xa0)))
y := add(y, shl(176, mload(0xc0)))
mstore(3168, y)

            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0xe0)
x := add(x, shl(88, mload(0x100)))
x := add(x, shl(176, mload(0x120)))
mstore(3200, x)
let y := mload(0x140)
y := add(y, shl(88, mload(0x160)))
y := add(y, shl(176, mload(0x180)))
mstore(3232, y)

            success := and(validate_ec_point(x, y), success)
        }
mstore(0xcc0, mulmod(mload(0x800), mload(0x800), f_q))
mstore(0xce0, mulmod(mload(0xcc0), mload(0xcc0), f_q))
mstore(0xd00, mulmod(mload(0xce0), mload(0xce0), f_q))
mstore(0xd20, mulmod(mload(0xd00), mload(0xd00), f_q))
mstore(0xd40, mulmod(mload(0xd20), mload(0xd20), f_q))
mstore(0xd60, mulmod(mload(0xd40), mload(0xd40), f_q))
mstore(0xd80, mulmod(mload(0xd60), mload(0xd60), f_q))
mstore(0xda0, mulmod(mload(0xd80), mload(0xd80), f_q))
mstore(0xdc0, mulmod(mload(0xda0), mload(0xda0), f_q))
mstore(0xde0, mulmod(mload(0xdc0), mload(0xdc0), f_q))
mstore(0xe00, mulmod(mload(0xde0), mload(0xde0), f_q))
mstore(0xe20, mulmod(mload(0xe00), mload(0xe00), f_q))
mstore(0xe40, mulmod(mload(0xe20), mload(0xe20), f_q))
mstore(0xe60, mulmod(mload(0xe40), mload(0xe40), f_q))
mstore(0xe80, mulmod(mload(0xe60), mload(0xe60), f_q))
mstore(0xea0, mulmod(mload(0xe80), mload(0xe80), f_q))
mstore(0xec0, mulmod(mload(0xea0), mload(0xea0), f_q))
mstore(0xee0, mulmod(mload(0xec0), mload(0xec0), f_q))
mstore(0xf00, mulmod(mload(0xee0), mload(0xee0), f_q))
mstore(0xf20, mulmod(mload(0xf00), mload(0xf00), f_q))
mstore(0xf40, mulmod(mload(0xf20), mload(0xf20), f_q))
mstore(0xf60, mulmod(mload(0xf40), mload(0xf40), f_q))
mstore(0xf80, mulmod(mload(0xf60), mload(0xf60), f_q))
mstore(0xfa0, mulmod(mload(0xf80), mload(0xf80), f_q))
mstore(0xfc0, addmod(mload(0xfa0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xfe0, mulmod(mload(0xfc0), 21888241567198334088790460357988866238279339518792980768180410072331574733841, f_q))
mstore(0x1000, mulmod(mload(0xfe0), 12929131318670223636853686797196826072950305380535537217467769528748593133487, f_q))
mstore(0x1020, addmod(mload(0x800), 8959111553169051585392718948060449015598059019880497126230434657827215362130, f_q))
mstore(0x1040, mulmod(mload(0xfe0), 14655294445420895451632927078981340937842238432098198055057679026789553137428, f_q))
mstore(0x1060, addmod(mload(0x800), 7232948426418379770613478666275934150706125968317836288640525159786255358189, f_q))
mstore(0x1080, mulmod(mload(0xfe0), 12220484078924208264862893648548198807365556694478604924193442790112568454894, f_q))
mstore(0x10a0, addmod(mload(0x800), 9667758792915066957383512096709076281182807705937429419504761396463240040723, f_q))
mstore(0x10c0, mulmod(mload(0xfe0), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))
mstore(0x10e0, addmod(mload(0x800), 13154116519010929542673167886091370382741775939114889923107781597533678454429, f_q))
mstore(0x1100, mulmod(mload(0xfe0), 7358966525675286471217089135633860168646304224547606326237275077574224349359, f_q))
mstore(0x1120, addmod(mload(0x800), 14529276346163988751029316609623414919902060175868428017460929109001584146258, f_q))
mstore(0x1140, mulmod(mload(0xfe0), 9741553891420464328295280489650144566903017206473301385034033384879943874347, f_q))
mstore(0x1160, addmod(mload(0x800), 12146688980418810893951125255607130521645347193942732958664170801695864621270, f_q))
mstore(0x1180, mulmod(mload(0xfe0), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
mstore(0x11a0, addmod(mload(0x800), 4558794634599160729665540001169218674296628713450539706539395399156027320107, f_q))
mstore(0x11c0, mulmod(mload(0xfe0), 1, f_q))
mstore(0x11e0, addmod(mload(0x800), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x1200, mulmod(mload(0xfe0), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
mstore(0x1220, addmod(mload(0x800), 10436837293141318478790164891277058815157809665667237910671663755188835910966, f_q))
mstore(0x1240, mulmod(mload(0xfe0), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
mstore(0x1260, addmod(mload(0x800), 13513867906530865119835332133273263211836799082674232843258448413103731898270, f_q))
mstore(0x1280, mulmod(mload(0xfe0), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
mstore(0x12a0, addmod(mload(0x800), 397435866944165296105265499114012685257684941273893521957278993950622991095, f_q))
mstore(0x12c0, mulmod(mload(0xfe0), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
mstore(0x12e0, addmod(mload(0x800), 10676941854703594198666993839846402519342119846958189386823924046696287912227, f_q))
mstore(0x1300, mulmod(mload(0xfe0), 18846108080730935585192484934247867403156699586319724728525857970312957475341, f_q))
mstore(0x1320, addmod(mload(0x800), 3042134791108339637053920811009407685391664814096309615172346216262851020276, f_q))
mstore(0x1340, mulmod(mload(0xfe0), 3615478808282855240548287271348143516886772452944084747768312988864436725401, f_q))
mstore(0x1360, addmod(mload(0x800), 18272764063556419981698118473909131571661591947471949595929891197711371770216, f_q))
mstore(0x1380, mulmod(mload(0xfe0), 21451937155080765789602997556105366785934335730087568134349216848800867145453, f_q))
mstore(0x13a0, addmod(mload(0x800), 436305716758509432643408189151908302614028670328466209348987337774941350164, f_q))
mstore(0x13c0, mulmod(mload(0xfe0), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))
mstore(0x13e0, addmod(mload(0x800), 20461838439117790833741043996939313553025008529160428886800406442142042007110, f_q))
mstore(0x1400, mulmod(mload(0xfe0), 13982290267294411190096162596630216412723378687553046594730793425118513274800, f_q))
mstore(0x1420, addmod(mload(0x800), 7905952604544864032150243148627058675824985712862987748967410761457295220817, f_q))
mstore(0x1440, mulmod(mload(0xfe0), 216092043779272773661818549620449970334216366264741118684015851799902419467, f_q))
mstore(0x1460, addmod(mload(0x800), 21672150828060002448584587195636825118214148034151293225014188334775906076150, f_q))
mstore(0x1480, mulmod(mload(0xfe0), 9537783784440837896026284659246718978615447564543116209283382057778110278482, f_q))
mstore(0x14a0, addmod(mload(0x800), 12350459087398437326220121086010556109932916835872918134414822128797698217135, f_q))
mstore(0x14c0, mulmod(mload(0xfe0), 12619617507853212586156872920672483948819476989779550311307282715684870266992, f_q))
mstore(0x14e0, addmod(mload(0x800), 9268625363986062636089532824584791139728887410636484032390921470890938228625, f_q))
mstore(0x1500, mulmod(mload(0xfe0), 3947443723575973965644279767310964219908423994086470065513888332899718123222, f_q))
mstore(0x1520, addmod(mload(0x800), 17940799148263301256602125977946310868639940406329564278184315853676090372395, f_q))
mstore(0x1540, mulmod(mload(0xfe0), 18610195890048912503953886742825279624920778288956610528523679659246523534888, f_q))
mstore(0x1560, addmod(mload(0x800), 3278046981790362718292519002431995463627586111459423815174524527329284960729, f_q))
mstore(0x1580, mulmod(mload(0xfe0), 1539082509056298927655194235755440186888826897239928178265486731666142403222, f_q))
mstore(0x15a0, addmod(mload(0x800), 20349160362782976294591211509501834901659537503176106165432717454909666092395, f_q))
mstore(0x15c0, mulmod(mload(0xfe0), 19032961837237948602743626455740240236231119053033140765040043513661803148152, f_q))
mstore(0x15e0, addmod(mload(0x800), 2855281034601326619502779289517034852317245347382893578658160672914005347465, f_q))
mstore(0x1600, mulmod(mload(0xfe0), 4317410353320599552056040796202302907960891408523818766419977508859423800635, f_q))
mstore(0x1620, addmod(mload(0x800), 17570832518518675670190364949054972180587472991892215577278226677716384694982, f_q))
mstore(0x1640, mulmod(mload(0xfe0), 14875928112196239563830800280253496262679717528621719058794366823499719730250, f_q))
mstore(0x1660, addmod(mload(0x800), 7012314759643035658415605465003778825868646871794315284903837363076088765367, f_q))
mstore(0x1680, mulmod(mload(0xfe0), 2366023502186770334390939928726871658997402416352868340984630739442624219298, f_q))
mstore(0x16a0, addmod(mload(0x800), 19522219369652504887855465816530403429550961984063166002713573447133184276319, f_q))
mstore(0x16c0, mulmod(mload(0xfe0), 915149353520972163646494413843788069594022902357002628455555785223409501882, f_q))
mstore(0x16e0, addmod(mload(0x800), 20973093518318303058599911331413487018954341498059031715242648401352398993735, f_q))
mstore(0x1700, mulmod(mload(0xfe0), 14391499717548074167711220639833994904150450341569029103202493919171555826079, f_q))
mstore(0x1720, addmod(mload(0x800), 7496743154291201054535185105423280184397914058847005240495710267404252669538, f_q))
mstore(0x1740, mulmod(mload(0xfe0), 5522161504810533295870699551020523636289972223872138525048055197429246400245, f_q))
mstore(0x1760, addmod(mload(0x800), 16366081367028741926375706194236751452258392176543895818650148989146562095372, f_q))
mstore(0x1780, mulmod(mload(0xfe0), 10119780362642123194334092174270235809557798114544683654677907882314807212354, f_q))
mstore(0x17a0, addmod(mload(0x800), 11768462509197152027912313570987039278990566285871350689020296304261001283263, f_q))
mstore(0x17c0, mulmod(mload(0xfe0), 3766081621734395783232337525162072736827576297943013392955872170138036189193, f_q))
mstore(0x17e0, addmod(mload(0x800), 18122161250104879439014068220095202351720788102473020950742332016437772306424, f_q))
mstore(0x1800, mulmod(mload(0xfe0), 2080322550956715654503104356805349981348621877591103674778333538652571537127, f_q))
mstore(0x1820, addmod(mload(0x800), 19807920320882559567743301388451925107199742522824930668919870647923236958490, f_q))
mstore(0x1840, mulmod(mload(0xfe0), 9100833993744738801214480881117348002768153232283708533639316963648253510584, f_q))
mstore(0x1860, addmod(mload(0x800), 12787408878094536421031924864139927085780211168132325810058887222927554985033, f_q))
mstore(0x1880, mulmod(mload(0xfe0), 11145214675344139457514777444556774698911688619991656085001542609383151586084, f_q))
mstore(0x18a0, addmod(mload(0x800), 10743028196495135764731628300700500389636675780424378258696661577192656909533, f_q))
mstore(0x18c0, mulmod(mload(0xfe0), 4245441013247250116003069945606352967193023389718465410501109428393342802981, f_q))
mstore(0x18e0, addmod(mload(0x800), 17642801858592025106243335799650922121355341010697568933197094758182465692636, f_q))
mstore(0x1900, mulmod(mload(0xfe0), 19228510170961893342195489288913594506775385223367826565223897736323409650249, f_q))
mstore(0x1920, addmod(mload(0x800), 2659732700877381880050916456343680581772979177048207778474306450252398845368, f_q))
{
            let prod := mload(0x1020)

                prod := mulmod(mload(0x1060), prod, f_q)
                mstore(0x1940, prod)
            
                prod := mulmod(mload(0x10a0), prod, f_q)
                mstore(0x1960, prod)
            
                prod := mulmod(mload(0x10e0), prod, f_q)
                mstore(0x1980, prod)
            
                prod := mulmod(mload(0x1120), prod, f_q)
                mstore(0x19a0, prod)
            
                prod := mulmod(mload(0x1160), prod, f_q)
                mstore(0x19c0, prod)
            
                prod := mulmod(mload(0x11a0), prod, f_q)
                mstore(0x19e0, prod)
            
                prod := mulmod(mload(0x11e0), prod, f_q)
                mstore(0x1a00, prod)
            
                prod := mulmod(mload(0x1220), prod, f_q)
                mstore(0x1a20, prod)
            
                prod := mulmod(mload(0x1260), prod, f_q)
                mstore(0x1a40, prod)
            
                prod := mulmod(mload(0x12a0), prod, f_q)
                mstore(0x1a60, prod)
            
                prod := mulmod(mload(0x12e0), prod, f_q)
                mstore(0x1a80, prod)
            
                prod := mulmod(mload(0x1320), prod, f_q)
                mstore(0x1aa0, prod)
            
                prod := mulmod(mload(0x1360), prod, f_q)
                mstore(0x1ac0, prod)
            
                prod := mulmod(mload(0x13a0), prod, f_q)
                mstore(0x1ae0, prod)
            
                prod := mulmod(mload(0x13e0), prod, f_q)
                mstore(0x1b00, prod)
            
                prod := mulmod(mload(0x1420), prod, f_q)
                mstore(0x1b20, prod)
            
                prod := mulmod(mload(0x1460), prod, f_q)
                mstore(0x1b40, prod)
            
                prod := mulmod(mload(0x14a0), prod, f_q)
                mstore(0x1b60, prod)
            
                prod := mulmod(mload(0x14e0), prod, f_q)
                mstore(0x1b80, prod)
            
                prod := mulmod(mload(0x1520), prod, f_q)
                mstore(0x1ba0, prod)
            
                prod := mulmod(mload(0x1560), prod, f_q)
                mstore(0x1bc0, prod)
            
                prod := mulmod(mload(0x15a0), prod, f_q)
                mstore(0x1be0, prod)
            
                prod := mulmod(mload(0x15e0), prod, f_q)
                mstore(0x1c00, prod)
            
                prod := mulmod(mload(0x1620), prod, f_q)
                mstore(0x1c20, prod)
            
                prod := mulmod(mload(0x1660), prod, f_q)
                mstore(0x1c40, prod)
            
                prod := mulmod(mload(0x16a0), prod, f_q)
                mstore(0x1c60, prod)
            
                prod := mulmod(mload(0x16e0), prod, f_q)
                mstore(0x1c80, prod)
            
                prod := mulmod(mload(0x1720), prod, f_q)
                mstore(0x1ca0, prod)
            
                prod := mulmod(mload(0x1760), prod, f_q)
                mstore(0x1cc0, prod)
            
                prod := mulmod(mload(0x17a0), prod, f_q)
                mstore(0x1ce0, prod)
            
                prod := mulmod(mload(0x17e0), prod, f_q)
                mstore(0x1d00, prod)
            
                prod := mulmod(mload(0x1820), prod, f_q)
                mstore(0x1d20, prod)
            
                prod := mulmod(mload(0x1860), prod, f_q)
                mstore(0x1d40, prod)
            
                prod := mulmod(mload(0x18a0), prod, f_q)
                mstore(0x1d60, prod)
            
                prod := mulmod(mload(0x18e0), prod, f_q)
                mstore(0x1d80, prod)
            
                prod := mulmod(mload(0x1920), prod, f_q)
                mstore(0x1da0, prod)
            
                prod := mulmod(mload(0xfc0), prod, f_q)
                mstore(0x1dc0, prod)
            
        }
mstore(0x1e00, 32)
mstore(0x1e20, 32)
mstore(0x1e40, 32)
mstore(0x1e60, mload(0x1dc0))
mstore(0x1e80, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1ea0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x1e00, 0xc0, 0x1de0, 0x20), 1), success)
{
            
            let inv := mload(0x1de0)
            let v
        
                    v := mload(0xfc0)
                    mstore(4032, mulmod(mload(0x1da0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1920)
                    mstore(6432, mulmod(mload(0x1d80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x18e0)
                    mstore(6368, mulmod(mload(0x1d60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x18a0)
                    mstore(6304, mulmod(mload(0x1d40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1860)
                    mstore(6240, mulmod(mload(0x1d20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1820)
                    mstore(6176, mulmod(mload(0x1d00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x17e0)
                    mstore(6112, mulmod(mload(0x1ce0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x17a0)
                    mstore(6048, mulmod(mload(0x1cc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1760)
                    mstore(5984, mulmod(mload(0x1ca0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1720)
                    mstore(5920, mulmod(mload(0x1c80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x16e0)
                    mstore(5856, mulmod(mload(0x1c60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x16a0)
                    mstore(5792, mulmod(mload(0x1c40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1660)
                    mstore(5728, mulmod(mload(0x1c20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1620)
                    mstore(5664, mulmod(mload(0x1c00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x15e0)
                    mstore(5600, mulmod(mload(0x1be0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x15a0)
                    mstore(5536, mulmod(mload(0x1bc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1560)
                    mstore(5472, mulmod(mload(0x1ba0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1520)
                    mstore(5408, mulmod(mload(0x1b80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x14e0)
                    mstore(5344, mulmod(mload(0x1b60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x14a0)
                    mstore(5280, mulmod(mload(0x1b40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1460)
                    mstore(5216, mulmod(mload(0x1b20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1420)
                    mstore(5152, mulmod(mload(0x1b00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x13e0)
                    mstore(5088, mulmod(mload(0x1ae0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x13a0)
                    mstore(5024, mulmod(mload(0x1ac0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1360)
                    mstore(4960, mulmod(mload(0x1aa0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1320)
                    mstore(4896, mulmod(mload(0x1a80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x12e0)
                    mstore(4832, mulmod(mload(0x1a60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x12a0)
                    mstore(4768, mulmod(mload(0x1a40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1260)
                    mstore(4704, mulmod(mload(0x1a20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1220)
                    mstore(4640, mulmod(mload(0x1a00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x11e0)
                    mstore(4576, mulmod(mload(0x19e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x11a0)
                    mstore(4512, mulmod(mload(0x19c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1160)
                    mstore(4448, mulmod(mload(0x19a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1120)
                    mstore(4384, mulmod(mload(0x1980), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x10e0)
                    mstore(4320, mulmod(mload(0x1960), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x10a0)
                    mstore(4256, mulmod(mload(0x1940), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1060)
                    mstore(4192, mulmod(mload(0x1020), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x1020, inv)

        }
mstore(0x1ec0, mulmod(mload(0x1000), mload(0x1020), f_q))
mstore(0x1ee0, mulmod(mload(0x1040), mload(0x1060), f_q))
mstore(0x1f00, mulmod(mload(0x1080), mload(0x10a0), f_q))
mstore(0x1f20, mulmod(mload(0x10c0), mload(0x10e0), f_q))
mstore(0x1f40, mulmod(mload(0x1100), mload(0x1120), f_q))
mstore(0x1f60, mulmod(mload(0x1140), mload(0x1160), f_q))
mstore(0x1f80, mulmod(mload(0x1180), mload(0x11a0), f_q))
mstore(0x1fa0, mulmod(mload(0x11c0), mload(0x11e0), f_q))
mstore(0x1fc0, mulmod(mload(0x1200), mload(0x1220), f_q))
mstore(0x1fe0, mulmod(mload(0x1240), mload(0x1260), f_q))
mstore(0x2000, mulmod(mload(0x1280), mload(0x12a0), f_q))
mstore(0x2020, mulmod(mload(0x12c0), mload(0x12e0), f_q))
mstore(0x2040, mulmod(mload(0x1300), mload(0x1320), f_q))
mstore(0x2060, mulmod(mload(0x1340), mload(0x1360), f_q))
mstore(0x2080, mulmod(mload(0x1380), mload(0x13a0), f_q))
mstore(0x20a0, mulmod(mload(0x13c0), mload(0x13e0), f_q))
mstore(0x20c0, mulmod(mload(0x1400), mload(0x1420), f_q))
mstore(0x20e0, mulmod(mload(0x1440), mload(0x1460), f_q))
mstore(0x2100, mulmod(mload(0x1480), mload(0x14a0), f_q))
mstore(0x2120, mulmod(mload(0x14c0), mload(0x14e0), f_q))
mstore(0x2140, mulmod(mload(0x1500), mload(0x1520), f_q))
mstore(0x2160, mulmod(mload(0x1540), mload(0x1560), f_q))
mstore(0x2180, mulmod(mload(0x1580), mload(0x15a0), f_q))
mstore(0x21a0, mulmod(mload(0x15c0), mload(0x15e0), f_q))
mstore(0x21c0, mulmod(mload(0x1600), mload(0x1620), f_q))
mstore(0x21e0, mulmod(mload(0x1640), mload(0x1660), f_q))
mstore(0x2200, mulmod(mload(0x1680), mload(0x16a0), f_q))
mstore(0x2220, mulmod(mload(0x16c0), mload(0x16e0), f_q))
mstore(0x2240, mulmod(mload(0x1700), mload(0x1720), f_q))
mstore(0x2260, mulmod(mload(0x1740), mload(0x1760), f_q))
mstore(0x2280, mulmod(mload(0x1780), mload(0x17a0), f_q))
mstore(0x22a0, mulmod(mload(0x17c0), mload(0x17e0), f_q))
mstore(0x22c0, mulmod(mload(0x1800), mload(0x1820), f_q))
mstore(0x22e0, mulmod(mload(0x1840), mload(0x1860), f_q))
mstore(0x2300, mulmod(mload(0x1880), mload(0x18a0), f_q))
mstore(0x2320, mulmod(mload(0x18c0), mload(0x18e0), f_q))
mstore(0x2340, mulmod(mload(0x1900), mload(0x1920), f_q))
{
            let result := mulmod(mload(0x1fa0), mload(0x20), f_q)
result := addmod(mulmod(mload(0x1fc0), mload(0x40), f_q), result, f_q)
result := addmod(mulmod(mload(0x1fe0), mload(0x60), f_q), result, f_q)
result := addmod(mulmod(mload(0x2000), mload(0x80), f_q), result, f_q)
result := addmod(mulmod(mload(0x2020), mload(0xa0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2040), mload(0xc0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2060), mload(0xe0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2080), mload(0x100), f_q), result, f_q)
result := addmod(mulmod(mload(0x20a0), mload(0x120), f_q), result, f_q)
result := addmod(mulmod(mload(0x20c0), mload(0x140), f_q), result, f_q)
result := addmod(mulmod(mload(0x20e0), mload(0x160), f_q), result, f_q)
result := addmod(mulmod(mload(0x2100), mload(0x180), f_q), result, f_q)
result := addmod(mulmod(mload(0x2120), mload(0x1a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2140), mload(0x1c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2160), mload(0x1e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2180), mload(0x200), f_q), result, f_q)
result := addmod(mulmod(mload(0x21a0), mload(0x220), f_q), result, f_q)
result := addmod(mulmod(mload(0x21c0), mload(0x240), f_q), result, f_q)
result := addmod(mulmod(mload(0x21e0), mload(0x260), f_q), result, f_q)
result := addmod(mulmod(mload(0x2200), mload(0x280), f_q), result, f_q)
result := addmod(mulmod(mload(0x2220), mload(0x2a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2240), mload(0x2c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2260), mload(0x2e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2280), mload(0x300), f_q), result, f_q)
result := addmod(mulmod(mload(0x22a0), mload(0x320), f_q), result, f_q)
result := addmod(mulmod(mload(0x22c0), mload(0x340), f_q), result, f_q)
result := addmod(mulmod(mload(0x22e0), mload(0x360), f_q), result, f_q)
result := addmod(mulmod(mload(0x2300), mload(0x380), f_q), result, f_q)
result := addmod(mulmod(mload(0x2320), mload(0x3a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2340), mload(0x3c0), f_q), result, f_q)
mstore(9056, result)
        }
mstore(0x2380, mulmod(mload(0x880), mload(0x860), f_q))
mstore(0x23a0, addmod(mload(0x840), mload(0x2380), f_q))
mstore(0x23c0, addmod(mload(0x23a0), sub(f_q, mload(0x8a0)), f_q))
mstore(0x23e0, mulmod(mload(0x23c0), mload(0x920), f_q))
mstore(0x2400, mulmod(mload(0x6a0), mload(0x23e0), f_q))
mstore(0x2420, addmod(1, sub(f_q, mload(0x9c0)), f_q))
mstore(0x2440, mulmod(mload(0x2420), mload(0x1fa0), f_q))
mstore(0x2460, addmod(mload(0x2400), mload(0x2440), f_q))
mstore(0x2480, mulmod(mload(0x6a0), mload(0x2460), f_q))
mstore(0x24a0, mulmod(mload(0x9c0), mload(0x9c0), f_q))
mstore(0x24c0, addmod(mload(0x24a0), sub(f_q, mload(0x9c0)), f_q))
mstore(0x24e0, mulmod(mload(0x24c0), mload(0x1ec0), f_q))
mstore(0x2500, addmod(mload(0x2480), mload(0x24e0), f_q))
mstore(0x2520, mulmod(mload(0x6a0), mload(0x2500), f_q))
mstore(0x2540, addmod(1, sub(f_q, mload(0x1ec0)), f_q))
mstore(0x2560, addmod(mload(0x1ee0), mload(0x1f00), f_q))
mstore(0x2580, addmod(mload(0x2560), mload(0x1f20), f_q))
mstore(0x25a0, addmod(mload(0x2580), mload(0x1f40), f_q))
mstore(0x25c0, addmod(mload(0x25a0), mload(0x1f60), f_q))
mstore(0x25e0, addmod(mload(0x25c0), mload(0x1f80), f_q))
mstore(0x2600, addmod(mload(0x2540), sub(f_q, mload(0x25e0)), f_q))
mstore(0x2620, mulmod(mload(0x960), mload(0x520), f_q))
mstore(0x2640, addmod(mload(0x8c0), mload(0x2620), f_q))
mstore(0x2660, addmod(mload(0x2640), mload(0x580), f_q))
mstore(0x2680, mulmod(mload(0x980), mload(0x520), f_q))
mstore(0x26a0, addmod(mload(0x840), mload(0x2680), f_q))
mstore(0x26c0, addmod(mload(0x26a0), mload(0x580), f_q))
mstore(0x26e0, mulmod(mload(0x26c0), mload(0x2660), f_q))
mstore(0x2700, mulmod(mload(0x9a0), mload(0x520), f_q))
mstore(0x2720, addmod(mload(0x2360), mload(0x2700), f_q))
mstore(0x2740, addmod(mload(0x2720), mload(0x580), f_q))
mstore(0x2760, mulmod(mload(0x2740), mload(0x26e0), f_q))
mstore(0x2780, mulmod(mload(0x2760), mload(0x9e0), f_q))
mstore(0x27a0, mulmod(1, mload(0x520), f_q))
mstore(0x27c0, mulmod(mload(0x800), mload(0x27a0), f_q))
mstore(0x27e0, addmod(mload(0x8c0), mload(0x27c0), f_q))
mstore(0x2800, addmod(mload(0x27e0), mload(0x580), f_q))
mstore(0x2820, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x520), f_q))
mstore(0x2840, mulmod(mload(0x800), mload(0x2820), f_q))
mstore(0x2860, addmod(mload(0x840), mload(0x2840), f_q))
mstore(0x2880, addmod(mload(0x2860), mload(0x580), f_q))
mstore(0x28a0, mulmod(mload(0x2880), mload(0x2800), f_q))
mstore(0x28c0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x520), f_q))
mstore(0x28e0, mulmod(mload(0x800), mload(0x28c0), f_q))
mstore(0x2900, addmod(mload(0x2360), mload(0x28e0), f_q))
mstore(0x2920, addmod(mload(0x2900), mload(0x580), f_q))
mstore(0x2940, mulmod(mload(0x2920), mload(0x28a0), f_q))
mstore(0x2960, mulmod(mload(0x2940), mload(0x9c0), f_q))
mstore(0x2980, addmod(mload(0x2780), sub(f_q, mload(0x2960)), f_q))
mstore(0x29a0, mulmod(mload(0x2980), mload(0x2600), f_q))
mstore(0x29c0, addmod(mload(0x2520), mload(0x29a0), f_q))
mstore(0x29e0, mulmod(mload(0x6a0), mload(0x29c0), f_q))
mstore(0x2a00, addmod(1, sub(f_q, mload(0xa00)), f_q))
mstore(0x2a20, mulmod(mload(0x2a00), mload(0x1fa0), f_q))
mstore(0x2a40, addmod(mload(0x29e0), mload(0x2a20), f_q))
mstore(0x2a60, mulmod(mload(0x6a0), mload(0x2a40), f_q))
mstore(0x2a80, mulmod(mload(0xa00), mload(0xa00), f_q))
mstore(0x2aa0, addmod(mload(0x2a80), sub(f_q, mload(0xa00)), f_q))
mstore(0x2ac0, mulmod(mload(0x2aa0), mload(0x1ec0), f_q))
mstore(0x2ae0, addmod(mload(0x2a60), mload(0x2ac0), f_q))
mstore(0x2b00, mulmod(mload(0x6a0), mload(0x2ae0), f_q))
mstore(0x2b20, addmod(mload(0xa40), mload(0x520), f_q))
mstore(0x2b40, mulmod(mload(0x2b20), mload(0xa20), f_q))
mstore(0x2b60, addmod(mload(0xa80), mload(0x580), f_q))
mstore(0x2b80, mulmod(mload(0x2b60), mload(0x2b40), f_q))
mstore(0x2ba0, mulmod(mload(0x840), mload(0x900), f_q))
mstore(0x2bc0, addmod(mload(0x2ba0), mload(0x520), f_q))
mstore(0x2be0, mulmod(mload(0x2bc0), mload(0xa00), f_q))
mstore(0x2c00, addmod(mload(0x8e0), mload(0x580), f_q))
mstore(0x2c20, mulmod(mload(0x2c00), mload(0x2be0), f_q))
mstore(0x2c40, addmod(mload(0x2b80), sub(f_q, mload(0x2c20)), f_q))
mstore(0x2c60, mulmod(mload(0x2c40), mload(0x2600), f_q))
mstore(0x2c80, addmod(mload(0x2b00), mload(0x2c60), f_q))
mstore(0x2ca0, mulmod(mload(0x6a0), mload(0x2c80), f_q))
mstore(0x2cc0, addmod(mload(0xa40), sub(f_q, mload(0xa80)), f_q))
mstore(0x2ce0, mulmod(mload(0x2cc0), mload(0x1fa0), f_q))
mstore(0x2d00, addmod(mload(0x2ca0), mload(0x2ce0), f_q))
mstore(0x2d20, mulmod(mload(0x6a0), mload(0x2d00), f_q))
mstore(0x2d40, mulmod(mload(0x2cc0), mload(0x2600), f_q))
mstore(0x2d60, addmod(mload(0xa40), sub(f_q, mload(0xa60)), f_q))
mstore(0x2d80, mulmod(mload(0x2d60), mload(0x2d40), f_q))
mstore(0x2da0, addmod(mload(0x2d20), mload(0x2d80), f_q))
mstore(0x2dc0, mulmod(mload(0xfa0), mload(0xfa0), f_q))
mstore(0x2de0, mulmod(mload(0x2dc0), mload(0xfa0), f_q))
mstore(0x2e00, mulmod(mload(0x2de0), mload(0xfa0), f_q))
mstore(0x2e20, mulmod(1, mload(0xfa0), f_q))
mstore(0x2e40, mulmod(1, mload(0x2dc0), f_q))
mstore(0x2e60, mulmod(1, mload(0x2de0), f_q))
mstore(0x2e80, mulmod(mload(0x2da0), mload(0xfc0), f_q))
mstore(0x2ea0, mulmod(mload(0xcc0), mload(0x800), f_q))
mstore(0x2ec0, mulmod(mload(0x2ea0), mload(0x800), f_q))
mstore(0x2ee0, mulmod(mload(0x800), 1, f_q))
mstore(0x2f00, addmod(mload(0xbc0), sub(f_q, mload(0x2ee0)), f_q))
mstore(0x2f20, mulmod(mload(0x800), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
mstore(0x2f40, addmod(mload(0xbc0), sub(f_q, mload(0x2f20)), f_q))
mstore(0x2f60, mulmod(mload(0x800), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
mstore(0x2f80, addmod(mload(0xbc0), sub(f_q, mload(0x2f60)), f_q))
mstore(0x2fa0, mulmod(mload(0x800), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
mstore(0x2fc0, addmod(mload(0xbc0), sub(f_q, mload(0x2fa0)), f_q))
mstore(0x2fe0, mulmod(mload(0x800), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
mstore(0x3000, addmod(mload(0xbc0), sub(f_q, mload(0x2fe0)), f_q))
{
            let result := mulmod(mload(0xbc0), mulmod(mload(0x2ea0), 6616149745577394522356295102346368305374051634342887004165528916468992151333, f_q), f_q)
result := addmod(mulmod(mload(0x800), mulmod(mload(0x2ea0), 15272093126261880699890110642910906783174312766073147339532675270106816344284, f_q), f_q), result, f_q)
mstore(12320, result)
        }
{
            let result := mulmod(mload(0xbc0), mulmod(mload(0x2ea0), 530501691302793820034524283154921640443166880847115433758691660016816186416, f_q), f_q)
result := addmod(mulmod(mload(0x800), mulmod(mload(0x2ea0), 6735468303947967792722299167169712601265763928443086612877978228369959138708, f_q), f_q), result, f_q)
mstore(12352, result)
        }
{
            let result := mulmod(mload(0xbc0), mulmod(mload(0x2ea0), 6735468303947967792722299167169712601265763928443086612877978228369959138708, f_q), f_q)
result := addmod(mulmod(mload(0x800), mulmod(mload(0x2ea0), 21402573809525492531235934453699988060841876665026314791644170130242704768864, f_q), f_q), result, f_q)
mstore(12384, result)
        }
{
            let result := mulmod(mload(0xbc0), mulmod(mload(0x2ea0), 21558793644302942916864965630979640748886316167261336210841195936026980690666, f_q), f_q)
result := addmod(mulmod(mload(0x800), mulmod(mload(0x2ea0), 21647881284526053590463969745634050372655996593461286860577821962674562513632, f_q), f_q), result, f_q)
mstore(12416, result)
        }
mstore(0x30a0, mulmod(1, mload(0x2f00), f_q))
mstore(0x30c0, mulmod(mload(0x30a0), mload(0x2f80), f_q))
mstore(0x30e0, mulmod(mload(0x30c0), mload(0x2f40), f_q))
mstore(0x3100, mulmod(mload(0x30e0), mload(0x3000), f_q))
{
            let result := mulmod(mload(0xbc0), mulmod(mload(0x800), 10436837293141318478790164891277058815157809665667237910671663755188835910967, f_q), f_q)
result := addmod(mulmod(mload(0x800), mulmod(mload(0x800), 11451405578697956743456240853980216273390554734748796433026540431386972584650, f_q), f_q), result, f_q)
mstore(12576, result)
        }
{
            let result := mulmod(mload(0xbc0), mulmod(mload(0x800), 11451405578697956743456240853980216273390554734748796433026540431386972584650, f_q), f_q)
result := addmod(mulmod(mload(0x800), mulmod(mload(0x800), 3077030613389546641045167241996204396678989417006994932586784657914895987304, f_q), f_q), result, f_q)
mstore(12608, result)
        }
{
            let result := mulmod(mload(0xbc0), mulmod(mload(0x800), 4558794634599160729665540001169218674296628713450539706539395399156027320108, f_q), f_q)
result := addmod(mulmod(mload(0x800), mulmod(mload(0x800), 17329448237240114492580865744088056414251735686965494637158808787419781175509, f_q), f_q), result, f_q)
mstore(12640, result)
        }
{
            let result := mulmod(mload(0xbc0), mulmod(mload(0x800), 17329448237240114492580865744088056414251735686965494637158808787419781175509, f_q), f_q)
result := addmod(mulmod(mload(0x800), mulmod(mload(0x800), 7587894345819650164285585254437911847348718480492193252124775402539837301163, f_q), f_q), result, f_q)
mstore(12672, result)
        }
mstore(0x31a0, mulmod(mload(0x30a0), mload(0x2fc0), f_q))
{
            let result := mulmod(mload(0xbc0), 1, f_q)
result := addmod(mulmod(mload(0x800), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)
mstore(12736, result)
        }
{
            let prod := mload(0x3020)

                prod := mulmod(mload(0x3040), prod, f_q)
                mstore(0x31e0, prod)
            
                prod := mulmod(mload(0x3060), prod, f_q)
                mstore(0x3200, prod)
            
                prod := mulmod(mload(0x3080), prod, f_q)
                mstore(0x3220, prod)
            
                prod := mulmod(mload(0x3120), prod, f_q)
                mstore(0x3240, prod)
            
                prod := mulmod(mload(0x3140), prod, f_q)
                mstore(0x3260, prod)
            
                prod := mulmod(mload(0x30c0), prod, f_q)
                mstore(0x3280, prod)
            
                prod := mulmod(mload(0x3160), prod, f_q)
                mstore(0x32a0, prod)
            
                prod := mulmod(mload(0x3180), prod, f_q)
                mstore(0x32c0, prod)
            
                prod := mulmod(mload(0x31a0), prod, f_q)
                mstore(0x32e0, prod)
            
                prod := mulmod(mload(0x31c0), prod, f_q)
                mstore(0x3300, prod)
            
                prod := mulmod(mload(0x30a0), prod, f_q)
                mstore(0x3320, prod)
            
        }
mstore(0x3360, 32)
mstore(0x3380, 32)
mstore(0x33a0, 32)
mstore(0x33c0, mload(0x3320))
mstore(0x33e0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x3400, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x3360, 0xc0, 0x3340, 0x20), 1), success)
{
            
            let inv := mload(0x3340)
            let v
        
                    v := mload(0x30a0)
                    mstore(12448, mulmod(mload(0x3300), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x31c0)
                    mstore(12736, mulmod(mload(0x32e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x31a0)
                    mstore(12704, mulmod(mload(0x32c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3180)
                    mstore(12672, mulmod(mload(0x32a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3160)
                    mstore(12640, mulmod(mload(0x3280), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x30c0)
                    mstore(12480, mulmod(mload(0x3260), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3140)
                    mstore(12608, mulmod(mload(0x3240), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3120)
                    mstore(12576, mulmod(mload(0x3220), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3080)
                    mstore(12416, mulmod(mload(0x3200), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3060)
                    mstore(12384, mulmod(mload(0x31e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3040)
                    mstore(12352, mulmod(mload(0x3020), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x3020, inv)

        }
{
            let result := mload(0x3020)
result := addmod(mload(0x3040), result, f_q)
result := addmod(mload(0x3060), result, f_q)
result := addmod(mload(0x3080), result, f_q)
mstore(13344, result)
        }
mstore(0x3440, mulmod(mload(0x3100), mload(0x30c0), f_q))
{
            let result := mload(0x3120)
result := addmod(mload(0x3140), result, f_q)
mstore(13408, result)
        }
mstore(0x3480, mulmod(mload(0x3100), mload(0x31a0), f_q))
{
            let result := mload(0x3160)
result := addmod(mload(0x3180), result, f_q)
mstore(13472, result)
        }
mstore(0x34c0, mulmod(mload(0x3100), mload(0x30a0), f_q))
{
            let result := mload(0x31c0)
mstore(13536, result)
        }
{
            let prod := mload(0x3420)

                prod := mulmod(mload(0x3460), prod, f_q)
                mstore(0x3500, prod)
            
                prod := mulmod(mload(0x34a0), prod, f_q)
                mstore(0x3520, prod)
            
                prod := mulmod(mload(0x34e0), prod, f_q)
                mstore(0x3540, prod)
            
        }
mstore(0x3580, 32)
mstore(0x35a0, 32)
mstore(0x35c0, 32)
mstore(0x35e0, mload(0x3540))
mstore(0x3600, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x3620, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x3580, 0xc0, 0x3560, 0x20), 1), success)
{
            
            let inv := mload(0x3560)
            let v
        
                    v := mload(0x34e0)
                    mstore(13536, mulmod(mload(0x3520), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x34a0)
                    mstore(13472, mulmod(mload(0x3500), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3460)
                    mstore(13408, mulmod(mload(0x3420), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x3420, inv)

        }
mstore(0x3640, mulmod(mload(0x3440), mload(0x3460), f_q))
mstore(0x3660, mulmod(mload(0x3480), mload(0x34a0), f_q))
mstore(0x3680, mulmod(mload(0x34c0), mload(0x34e0), f_q))
mstore(0x36a0, mulmod(mload(0xac0), mload(0xac0), f_q))
mstore(0x36c0, mulmod(mload(0x36a0), mload(0xac0), f_q))
mstore(0x36e0, mulmod(mload(0x36c0), mload(0xac0), f_q))
mstore(0x3700, mulmod(mload(0x36e0), mload(0xac0), f_q))
mstore(0x3720, mulmod(mload(0x3700), mload(0xac0), f_q))
mstore(0x3740, mulmod(mload(0x3720), mload(0xac0), f_q))
mstore(0x3760, mulmod(mload(0x3740), mload(0xac0), f_q))
mstore(0x3780, mulmod(mload(0x3760), mload(0xac0), f_q))
mstore(0x37a0, mulmod(mload(0x3780), mload(0xac0), f_q))
mstore(0x37c0, mulmod(mload(0xb20), mload(0xb20), f_q))
mstore(0x37e0, mulmod(mload(0x37c0), mload(0xb20), f_q))
mstore(0x3800, mulmod(mload(0x37e0), mload(0xb20), f_q))
{
            let result := mulmod(mload(0x840), mload(0x3020), f_q)
result := addmod(mulmod(mload(0x860), mload(0x3040), f_q), result, f_q)
result := addmod(mulmod(mload(0x880), mload(0x3060), f_q), result, f_q)
result := addmod(mulmod(mload(0x8a0), mload(0x3080), f_q), result, f_q)
mstore(14368, result)
        }
mstore(0x3840, mulmod(mload(0x3820), mload(0x3420), f_q))
mstore(0x3860, mulmod(sub(f_q, mload(0x3840)), 1, f_q))
mstore(0x3880, mulmod(mload(0x3860), 1, f_q))
mstore(0x38a0, mulmod(1, mload(0x3440), f_q))
{
            let result := mulmod(mload(0x9c0), mload(0x3120), f_q)
result := addmod(mulmod(mload(0x9e0), mload(0x3140), f_q), result, f_q)
mstore(14528, result)
        }
mstore(0x38e0, mulmod(mload(0x38c0), mload(0x3640), f_q))
mstore(0x3900, mulmod(sub(f_q, mload(0x38e0)), 1, f_q))
mstore(0x3920, mulmod(mload(0x38a0), 1, f_q))
{
            let result := mulmod(mload(0xa00), mload(0x3120), f_q)
result := addmod(mulmod(mload(0xa20), mload(0x3140), f_q), result, f_q)
mstore(14656, result)
        }
mstore(0x3960, mulmod(mload(0x3940), mload(0x3640), f_q))
mstore(0x3980, mulmod(sub(f_q, mload(0x3960)), mload(0xac0), f_q))
mstore(0x39a0, mulmod(mload(0x38a0), mload(0xac0), f_q))
mstore(0x39c0, addmod(mload(0x3900), mload(0x3980), f_q))
mstore(0x39e0, mulmod(mload(0x39c0), mload(0xb20), f_q))
mstore(0x3a00, mulmod(mload(0x3920), mload(0xb20), f_q))
mstore(0x3a20, mulmod(mload(0x39a0), mload(0xb20), f_q))
mstore(0x3a40, addmod(mload(0x3880), mload(0x39e0), f_q))
mstore(0x3a60, mulmod(1, mload(0x3480), f_q))
{
            let result := mulmod(mload(0xa40), mload(0x3160), f_q)
result := addmod(mulmod(mload(0xa60), mload(0x3180), f_q), result, f_q)
mstore(14976, result)
        }
mstore(0x3aa0, mulmod(mload(0x3a80), mload(0x3660), f_q))
mstore(0x3ac0, mulmod(sub(f_q, mload(0x3aa0)), 1, f_q))
mstore(0x3ae0, mulmod(mload(0x3a60), 1, f_q))
mstore(0x3b00, mulmod(mload(0x3ac0), mload(0x37c0), f_q))
mstore(0x3b20, mulmod(mload(0x3ae0), mload(0x37c0), f_q))
mstore(0x3b40, addmod(mload(0x3a40), mload(0x3b00), f_q))
mstore(0x3b60, mulmod(1, mload(0x34c0), f_q))
{
            let result := mulmod(mload(0xa80), mload(0x31c0), f_q)
mstore(15232, result)
        }
mstore(0x3ba0, mulmod(mload(0x3b80), mload(0x3680), f_q))
mstore(0x3bc0, mulmod(sub(f_q, mload(0x3ba0)), 1, f_q))
mstore(0x3be0, mulmod(mload(0x3b60), 1, f_q))
{
            let result := mulmod(mload(0x8c0), mload(0x31c0), f_q)
mstore(15360, result)
        }
mstore(0x3c20, mulmod(mload(0x3c00), mload(0x3680), f_q))
mstore(0x3c40, mulmod(sub(f_q, mload(0x3c20)), mload(0xac0), f_q))
mstore(0x3c60, mulmod(mload(0x3b60), mload(0xac0), f_q))
mstore(0x3c80, addmod(mload(0x3bc0), mload(0x3c40), f_q))
{
            let result := mulmod(mload(0x8e0), mload(0x31c0), f_q)
mstore(15520, result)
        }
mstore(0x3cc0, mulmod(mload(0x3ca0), mload(0x3680), f_q))
mstore(0x3ce0, mulmod(sub(f_q, mload(0x3cc0)), mload(0x36a0), f_q))
mstore(0x3d00, mulmod(mload(0x3b60), mload(0x36a0), f_q))
mstore(0x3d20, addmod(mload(0x3c80), mload(0x3ce0), f_q))
{
            let result := mulmod(mload(0x900), mload(0x31c0), f_q)
mstore(15680, result)
        }
mstore(0x3d60, mulmod(mload(0x3d40), mload(0x3680), f_q))
mstore(0x3d80, mulmod(sub(f_q, mload(0x3d60)), mload(0x36c0), f_q))
mstore(0x3da0, mulmod(mload(0x3b60), mload(0x36c0), f_q))
mstore(0x3dc0, addmod(mload(0x3d20), mload(0x3d80), f_q))
{
            let result := mulmod(mload(0x920), mload(0x31c0), f_q)
mstore(15840, result)
        }
mstore(0x3e00, mulmod(mload(0x3de0), mload(0x3680), f_q))
mstore(0x3e20, mulmod(sub(f_q, mload(0x3e00)), mload(0x36e0), f_q))
mstore(0x3e40, mulmod(mload(0x3b60), mload(0x36e0), f_q))
mstore(0x3e60, addmod(mload(0x3dc0), mload(0x3e20), f_q))
{
            let result := mulmod(mload(0x960), mload(0x31c0), f_q)
mstore(16000, result)
        }
mstore(0x3ea0, mulmod(mload(0x3e80), mload(0x3680), f_q))
mstore(0x3ec0, mulmod(sub(f_q, mload(0x3ea0)), mload(0x3700), f_q))
mstore(0x3ee0, mulmod(mload(0x3b60), mload(0x3700), f_q))
mstore(0x3f00, addmod(mload(0x3e60), mload(0x3ec0), f_q))
{
            let result := mulmod(mload(0x980), mload(0x31c0), f_q)
mstore(16160, result)
        }
mstore(0x3f40, mulmod(mload(0x3f20), mload(0x3680), f_q))
mstore(0x3f60, mulmod(sub(f_q, mload(0x3f40)), mload(0x3720), f_q))
mstore(0x3f80, mulmod(mload(0x3b60), mload(0x3720), f_q))
mstore(0x3fa0, addmod(mload(0x3f00), mload(0x3f60), f_q))
{
            let result := mulmod(mload(0x9a0), mload(0x31c0), f_q)
mstore(16320, result)
        }
mstore(0x3fe0, mulmod(mload(0x3fc0), mload(0x3680), f_q))
mstore(0x4000, mulmod(sub(f_q, mload(0x3fe0)), mload(0x3740), f_q))
mstore(0x4020, mulmod(mload(0x3b60), mload(0x3740), f_q))
mstore(0x4040, addmod(mload(0x3fa0), mload(0x4000), f_q))
mstore(0x4060, mulmod(mload(0x2e20), mload(0x34c0), f_q))
mstore(0x4080, mulmod(mload(0x2e40), mload(0x34c0), f_q))
mstore(0x40a0, mulmod(mload(0x2e60), mload(0x34c0), f_q))
{
            let result := mulmod(mload(0x2e80), mload(0x31c0), f_q)
mstore(16576, result)
        }
mstore(0x40e0, mulmod(mload(0x40c0), mload(0x3680), f_q))
mstore(0x4100, mulmod(sub(f_q, mload(0x40e0)), mload(0x3760), f_q))
mstore(0x4120, mulmod(mload(0x3b60), mload(0x3760), f_q))
mstore(0x4140, mulmod(mload(0x4060), mload(0x3760), f_q))
mstore(0x4160, mulmod(mload(0x4080), mload(0x3760), f_q))
mstore(0x4180, mulmod(mload(0x40a0), mload(0x3760), f_q))
mstore(0x41a0, addmod(mload(0x4040), mload(0x4100), f_q))
{
            let result := mulmod(mload(0x940), mload(0x31c0), f_q)
mstore(16832, result)
        }
mstore(0x41e0, mulmod(mload(0x41c0), mload(0x3680), f_q))
mstore(0x4200, mulmod(sub(f_q, mload(0x41e0)), mload(0x3780), f_q))
mstore(0x4220, mulmod(mload(0x3b60), mload(0x3780), f_q))
mstore(0x4240, addmod(mload(0x41a0), mload(0x4200), f_q))
mstore(0x4260, mulmod(mload(0x4240), mload(0x37e0), f_q))
mstore(0x4280, mulmod(mload(0x3be0), mload(0x37e0), f_q))
mstore(0x42a0, mulmod(mload(0x3c60), mload(0x37e0), f_q))
mstore(0x42c0, mulmod(mload(0x3d00), mload(0x37e0), f_q))
mstore(0x42e0, mulmod(mload(0x3da0), mload(0x37e0), f_q))
mstore(0x4300, mulmod(mload(0x3e40), mload(0x37e0), f_q))
mstore(0x4320, mulmod(mload(0x3ee0), mload(0x37e0), f_q))
mstore(0x4340, mulmod(mload(0x3f80), mload(0x37e0), f_q))
mstore(0x4360, mulmod(mload(0x4020), mload(0x37e0), f_q))
mstore(0x4380, mulmod(mload(0x4120), mload(0x37e0), f_q))
mstore(0x43a0, mulmod(mload(0x4140), mload(0x37e0), f_q))
mstore(0x43c0, mulmod(mload(0x4160), mload(0x37e0), f_q))
mstore(0x43e0, mulmod(mload(0x4180), mload(0x37e0), f_q))
mstore(0x4400, mulmod(mload(0x4220), mload(0x37e0), f_q))
mstore(0x4420, addmod(mload(0x3b40), mload(0x4260), f_q))
mstore(0x4440, mulmod(1, mload(0x3100), f_q))
mstore(0x4460, mulmod(1, mload(0xbc0), f_q))
mstore(0x4480, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x44a0, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x44c0, mload(0x4420))
success := and(eq(staticcall(gas(), 0x7, 0x4480, 0x60, 0x4480, 0x40), 1), success)
mstore(0x44e0, mload(0x4480))
                    mstore(0x4500, mload(0x44a0))
mstore(0x4520, mload(0x3e0))
                    mstore(0x4540, mload(0x400))
success := and(eq(staticcall(gas(), 0x6, 0x44e0, 0x80, 0x44e0, 0x40), 1), success)
mstore(0x4560, mload(0x5c0))
                    mstore(0x4580, mload(0x5e0))
mstore(0x45a0, mload(0x3a00))
success := and(eq(staticcall(gas(), 0x7, 0x4560, 0x60, 0x4560, 0x40), 1), success)
mstore(0x45c0, mload(0x44e0))
                    mstore(0x45e0, mload(0x4500))
mstore(0x4600, mload(0x4560))
                    mstore(0x4620, mload(0x4580))
success := and(eq(staticcall(gas(), 0x6, 0x45c0, 0x80, 0x45c0, 0x40), 1), success)
mstore(0x4640, mload(0x600))
                    mstore(0x4660, mload(0x620))
mstore(0x4680, mload(0x3a20))
success := and(eq(staticcall(gas(), 0x7, 0x4640, 0x60, 0x4640, 0x40), 1), success)
mstore(0x46a0, mload(0x45c0))
                    mstore(0x46c0, mload(0x45e0))
mstore(0x46e0, mload(0x4640))
                    mstore(0x4700, mload(0x4660))
success := and(eq(staticcall(gas(), 0x6, 0x46a0, 0x80, 0x46a0, 0x40), 1), success)
mstore(0x4720, mload(0x480))
                    mstore(0x4740, mload(0x4a0))
mstore(0x4760, mload(0x3b20))
success := and(eq(staticcall(gas(), 0x7, 0x4720, 0x60, 0x4720, 0x40), 1), success)
mstore(0x4780, mload(0x46a0))
                    mstore(0x47a0, mload(0x46c0))
mstore(0x47c0, mload(0x4720))
                    mstore(0x47e0, mload(0x4740))
success := and(eq(staticcall(gas(), 0x6, 0x4780, 0x80, 0x4780, 0x40), 1), success)
mstore(0x4800, mload(0x4c0))
                    mstore(0x4820, mload(0x4e0))
mstore(0x4840, mload(0x4280))
success := and(eq(staticcall(gas(), 0x7, 0x4800, 0x60, 0x4800, 0x40), 1), success)
mstore(0x4860, mload(0x4780))
                    mstore(0x4880, mload(0x47a0))
mstore(0x48a0, mload(0x4800))
                    mstore(0x48c0, mload(0x4820))
success := and(eq(staticcall(gas(), 0x6, 0x4860, 0x80, 0x4860, 0x40), 1), success)
mstore(0x48e0, 0x0fecb233623be2fce7143d92636f995812b4a3c030b426596a651bdfe27456af)
                    mstore(0x4900, 0x21fd44a55abe1a571aec66c8387da477c60d5f672923d25fc3aceb01dec0414d)
mstore(0x4920, mload(0x42a0))
success := and(eq(staticcall(gas(), 0x7, 0x48e0, 0x60, 0x48e0, 0x40), 1), success)
mstore(0x4940, mload(0x4860))
                    mstore(0x4960, mload(0x4880))
mstore(0x4980, mload(0x48e0))
                    mstore(0x49a0, mload(0x4900))
success := and(eq(staticcall(gas(), 0x6, 0x4940, 0x80, 0x4940, 0x40), 1), success)
mstore(0x49c0, 0x125da3d762477ea5f12aa54f733d9355ca4dcd03cb9c0491923f4c97b183efdc)
                    mstore(0x49e0, 0x28fe468b65375e2c5da44ba95684ad5fe474897d64cb1a1adb0b2d398d7a65f7)
mstore(0x4a00, mload(0x42c0))
success := and(eq(staticcall(gas(), 0x7, 0x49c0, 0x60, 0x49c0, 0x40), 1), success)
mstore(0x4a20, mload(0x4940))
                    mstore(0x4a40, mload(0x4960))
mstore(0x4a60, mload(0x49c0))
                    mstore(0x4a80, mload(0x49e0))
success := and(eq(staticcall(gas(), 0x6, 0x4a20, 0x80, 0x4a20, 0x40), 1), success)
mstore(0x4aa0, 0x0aa2e7dbf8682d9acf55f3d1e78b8a1458bd2e470ec303bc5f879059cae57b44)
                    mstore(0x4ac0, 0x07b9faa96a199061140ccf63f6d928e806ae7e605ad60f9300f216f12b55a1da)
mstore(0x4ae0, mload(0x42e0))
success := and(eq(staticcall(gas(), 0x7, 0x4aa0, 0x60, 0x4aa0, 0x40), 1), success)
mstore(0x4b00, mload(0x4a20))
                    mstore(0x4b20, mload(0x4a40))
mstore(0x4b40, mload(0x4aa0))
                    mstore(0x4b60, mload(0x4ac0))
success := and(eq(staticcall(gas(), 0x6, 0x4b00, 0x80, 0x4b00, 0x40), 1), success)
mstore(0x4b80, 0x238108cd37d26d828b8a6cc1450ccdd1201c71f6ccf06606631c6f371c62614c)
                    mstore(0x4ba0, 0x18357f457a49229d5ed1b537be6af8e156642dd35d44d67e2a8c0e7fdbcc6cfb)
mstore(0x4bc0, mload(0x4300))
success := and(eq(staticcall(gas(), 0x7, 0x4b80, 0x60, 0x4b80, 0x40), 1), success)
mstore(0x4be0, mload(0x4b00))
                    mstore(0x4c00, mload(0x4b20))
mstore(0x4c20, mload(0x4b80))
                    mstore(0x4c40, mload(0x4ba0))
success := and(eq(staticcall(gas(), 0x6, 0x4be0, 0x80, 0x4be0, 0x40), 1), success)
mstore(0x4c60, 0x068663567de85ca234341102bf93eca9855aebc1f3a02f7b7690bfc4bc4616da)
                    mstore(0x4c80, 0x0ff69ef819b2fea01a1551829f2394a17e0da9a2ce040d964af9c40ed80b3fb2)
mstore(0x4ca0, mload(0x4320))
success := and(eq(staticcall(gas(), 0x7, 0x4c60, 0x60, 0x4c60, 0x40), 1), success)
mstore(0x4cc0, mload(0x4be0))
                    mstore(0x4ce0, mload(0x4c00))
mstore(0x4d00, mload(0x4c60))
                    mstore(0x4d20, mload(0x4c80))
success := and(eq(staticcall(gas(), 0x6, 0x4cc0, 0x80, 0x4cc0, 0x40), 1), success)
mstore(0x4d40, 0x2e6d7428c957d1a95fd1760f3ad2ebe188ebfd11c5dc99d69314597b0788096e)
                    mstore(0x4d60, 0x2b9b05b30b12e465ede4d2d12b7bc5a586409964c85f47680b856d32dbe341ea)
mstore(0x4d80, mload(0x4340))
success := and(eq(staticcall(gas(), 0x7, 0x4d40, 0x60, 0x4d40, 0x40), 1), success)
mstore(0x4da0, mload(0x4cc0))
                    mstore(0x4dc0, mload(0x4ce0))
mstore(0x4de0, mload(0x4d40))
                    mstore(0x4e00, mload(0x4d60))
success := and(eq(staticcall(gas(), 0x6, 0x4da0, 0x80, 0x4da0, 0x40), 1), success)
mstore(0x4e20, 0x015c6835d5a6e9d5b55cd6edd1317be8e904385e222165992af0fcdef72318c3)
                    mstore(0x4e40, 0x11690b2d6410aac785f92cd00749b9135d957cdc95966d898aa8d4bbe9a41912)
mstore(0x4e60, mload(0x4360))
success := and(eq(staticcall(gas(), 0x7, 0x4e20, 0x60, 0x4e20, 0x40), 1), success)
mstore(0x4e80, mload(0x4da0))
                    mstore(0x4ea0, mload(0x4dc0))
mstore(0x4ec0, mload(0x4e20))
                    mstore(0x4ee0, mload(0x4e40))
success := and(eq(staticcall(gas(), 0x6, 0x4e80, 0x80, 0x4e80, 0x40), 1), success)
mstore(0x4f00, mload(0x6e0))
                    mstore(0x4f20, mload(0x700))
mstore(0x4f40, mload(0x4380))
success := and(eq(staticcall(gas(), 0x7, 0x4f00, 0x60, 0x4f00, 0x40), 1), success)
mstore(0x4f60, mload(0x4e80))
                    mstore(0x4f80, mload(0x4ea0))
mstore(0x4fa0, mload(0x4f00))
                    mstore(0x4fc0, mload(0x4f20))
success := and(eq(staticcall(gas(), 0x6, 0x4f60, 0x80, 0x4f60, 0x40), 1), success)
mstore(0x4fe0, mload(0x720))
                    mstore(0x5000, mload(0x740))
mstore(0x5020, mload(0x43a0))
success := and(eq(staticcall(gas(), 0x7, 0x4fe0, 0x60, 0x4fe0, 0x40), 1), success)
mstore(0x5040, mload(0x4f60))
                    mstore(0x5060, mload(0x4f80))
mstore(0x5080, mload(0x4fe0))
                    mstore(0x50a0, mload(0x5000))
success := and(eq(staticcall(gas(), 0x6, 0x5040, 0x80, 0x5040, 0x40), 1), success)
mstore(0x50c0, mload(0x760))
                    mstore(0x50e0, mload(0x780))
mstore(0x5100, mload(0x43c0))
success := and(eq(staticcall(gas(), 0x7, 0x50c0, 0x60, 0x50c0, 0x40), 1), success)
mstore(0x5120, mload(0x5040))
                    mstore(0x5140, mload(0x5060))
mstore(0x5160, mload(0x50c0))
                    mstore(0x5180, mload(0x50e0))
success := and(eq(staticcall(gas(), 0x6, 0x5120, 0x80, 0x5120, 0x40), 1), success)
mstore(0x51a0, mload(0x7a0))
                    mstore(0x51c0, mload(0x7c0))
mstore(0x51e0, mload(0x43e0))
success := and(eq(staticcall(gas(), 0x7, 0x51a0, 0x60, 0x51a0, 0x40), 1), success)
mstore(0x5200, mload(0x5120))
                    mstore(0x5220, mload(0x5140))
mstore(0x5240, mload(0x51a0))
                    mstore(0x5260, mload(0x51c0))
success := and(eq(staticcall(gas(), 0x6, 0x5200, 0x80, 0x5200, 0x40), 1), success)
mstore(0x5280, mload(0x640))
                    mstore(0x52a0, mload(0x660))
mstore(0x52c0, mload(0x4400))
success := and(eq(staticcall(gas(), 0x7, 0x5280, 0x60, 0x5280, 0x40), 1), success)
mstore(0x52e0, mload(0x5200))
                    mstore(0x5300, mload(0x5220))
mstore(0x5320, mload(0x5280))
                    mstore(0x5340, mload(0x52a0))
success := and(eq(staticcall(gas(), 0x6, 0x52e0, 0x80, 0x52e0, 0x40), 1), success)
mstore(0x5360, mload(0xb60))
                    mstore(0x5380, mload(0xb80))
mstore(0x53a0, sub(f_q, mload(0x4440)))
success := and(eq(staticcall(gas(), 0x7, 0x5360, 0x60, 0x5360, 0x40), 1), success)
mstore(0x53c0, mload(0x52e0))
                    mstore(0x53e0, mload(0x5300))
mstore(0x5400, mload(0x5360))
                    mstore(0x5420, mload(0x5380))
success := and(eq(staticcall(gas(), 0x6, 0x53c0, 0x80, 0x53c0, 0x40), 1), success)
mstore(0x5440, mload(0xc00))
                    mstore(0x5460, mload(0xc20))
mstore(0x5480, mload(0x4460))
success := and(eq(staticcall(gas(), 0x7, 0x5440, 0x60, 0x5440, 0x40), 1), success)
mstore(0x54a0, mload(0x53c0))
                    mstore(0x54c0, mload(0x53e0))
mstore(0x54e0, mload(0x5440))
                    mstore(0x5500, mload(0x5460))
success := and(eq(staticcall(gas(), 0x6, 0x54a0, 0x80, 0x54a0, 0x40), 1), success)
mstore(0x5520, mload(0x54a0))
                    mstore(0x5540, mload(0x54c0))
mstore(0x5560, mload(0xc00))
                    mstore(0x5580, mload(0xc20))
mstore(0x55a0, mload(0xc40))
                    mstore(0x55c0, mload(0xc60))
mstore(0x55e0, mload(0xc80))
                    mstore(0x5600, mload(0xca0))
mstore(0x5620, keccak256(0x5520, 256))
mstore(22080, mod(mload(22048), f_q))
mstore(0x5660, mulmod(mload(0x5640), mload(0x5640), f_q))
mstore(0x5680, mulmod(1, mload(0x5640), f_q))
mstore(0x56a0, mload(0x55a0))
                    mstore(0x56c0, mload(0x55c0))
mstore(0x56e0, mload(0x5680))
success := and(eq(staticcall(gas(), 0x7, 0x56a0, 0x60, 0x56a0, 0x40), 1), success)
mstore(0x5700, mload(0x5520))
                    mstore(0x5720, mload(0x5540))
mstore(0x5740, mload(0x56a0))
                    mstore(0x5760, mload(0x56c0))
success := and(eq(staticcall(gas(), 0x6, 0x5700, 0x80, 0x5700, 0x40), 1), success)
mstore(0x5780, mload(0x55e0))
                    mstore(0x57a0, mload(0x5600))
mstore(0x57c0, mload(0x5680))
success := and(eq(staticcall(gas(), 0x7, 0x5780, 0x60, 0x5780, 0x40), 1), success)
mstore(0x57e0, mload(0x5560))
                    mstore(0x5800, mload(0x5580))
mstore(0x5820, mload(0x5780))
                    mstore(0x5840, mload(0x57a0))
success := and(eq(staticcall(gas(), 0x6, 0x57e0, 0x80, 0x57e0, 0x40), 1), success)
mstore(0x5860, mload(0x5700))
                    mstore(0x5880, mload(0x5720))
mstore(0x58a0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x58c0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x58e0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x5900, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x5920, mload(0x57e0))
                    mstore(0x5940, mload(0x5800))
mstore(0x5960, 0x0181624e80f3d6ae28df7e01eaeab1c0e919877a3b8a6b7fbc69a6817d596ea2)
            mstore(0x5980, 0x1783d30dcb12d259bb89098addf6280fa4b653be7a152542a28f7b926e27e648)
            mstore(0x59a0, 0x00ae44489d41a0d179e2dfdc03bddd883b7109f8b6ae316a59e815c1a6b35304)
            mstore(0x59c0, 0x0b2147ab62a386bd63e6de1522109b8c9588ab466f5aadfde8c41ca3749423ee)
success := and(eq(staticcall(gas(), 0x8, 0x5860, 0x180, 0x5860, 0x20), 1), success)
success := and(eq(mload(0x5860), 1), success)

            if not(success) { revert(0, 0) }
            return(0, 0)

                }
            }
        }
