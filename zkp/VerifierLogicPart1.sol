// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;
import "./VerifierLogicAbstract.sol";

contract VerifierLogicPart1 is VerifierLogicAbstract {
    function verifyPartial(
        uint256[] memory pubInputs,
        bytes memory proof,
        bool success,
        bytes32[1033] memory transcript
    ) public view override returns (bool, bytes32[1033] memory) {
        (pubInputs);
        (proof);
        assembly {{
            
                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
                    function validate_ec_point(x, y) -> valid {
                        {
                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            valid := and(x_lt_p, y_lt_p)
                        }
                        {
                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let is_affine := eq(x_cube_plus_3, y_square)
                            valid := and(valid, is_affine)
                        }
                    }
    {            let result := mulmod(mload(add(transcript, 0x3f20)), mload(add(transcript, 0x20)), f_q)result := addmod(mulmod(mload(add(transcript, 0x3f40)), mload(add(transcript, 0x40)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x3f60)), mload(add(transcript, 0x60)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x3f80)), mload(add(transcript, 0x80)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x3fa0)), mload(add(transcript, 0xa0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x3fc0)), mload(add(transcript, 0xc0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x3fe0)), mload(add(transcript, 0xe0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4000)), mload(add(transcript, 0x100)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4020)), mload(add(transcript, 0x120)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4040)), mload(add(transcript, 0x140)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4060)), mload(add(transcript, 0x160)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4080)), mload(add(transcript, 0x180)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x40a0)), mload(add(transcript, 0x1a0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x40c0)), mload(add(transcript, 0x1c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x40e0)), mload(add(transcript, 0x1e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4100)), mload(add(transcript, 0x200)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4120)), mload(add(transcript, 0x220)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4140)), mload(add(transcript, 0x240)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4160)), mload(add(transcript, 0x260)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4180)), mload(add(transcript, 0x280)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x41a0)), mload(add(transcript, 0x2a0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x41c0)), mload(add(transcript, 0x2c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x41e0)), mload(add(transcript, 0x2e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4200)), mload(add(transcript, 0x300)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4220)), mload(add(transcript, 0x320)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4240)), mload(add(transcript, 0x340)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4260)), mload(add(transcript, 0x360)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4280)), mload(add(transcript, 0x380)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x42a0)), mload(add(transcript, 0x3a0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x42c0)), mload(add(transcript, 0x3c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x42e0)), mload(add(transcript, 0x3e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4300)), mload(add(transcript, 0x400)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4320)), mload(add(transcript, 0x420)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4340)), mload(add(transcript, 0x440)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4360)), mload(add(transcript, 0x460)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4380)), mload(add(transcript, 0x480)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x43a0)), mload(add(transcript, 0x4a0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x43c0)), mload(add(transcript, 0x4c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x43e0)), mload(add(transcript, 0x4e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4400)), mload(add(transcript, 0x500)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4420)), mload(add(transcript, 0x520)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4440)), mload(add(transcript, 0x540)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4460)), mload(add(transcript, 0x560)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4480)), mload(add(transcript, 0x580)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x44a0)), mload(add(transcript, 0x5a0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x44c0)), mload(add(transcript, 0x5c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x44e0)), mload(add(transcript, 0x5e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4500)), mload(add(transcript, 0x600)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4520)), mload(add(transcript, 0x620)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4540)), mload(add(transcript, 0x640)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4560)), mload(add(transcript, 0x660)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4580)), mload(add(transcript, 0x680)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x45a0)), mload(add(transcript, 0x6a0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x45c0)), mload(add(transcript, 0x6c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x45e0)), mload(add(transcript, 0x6e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4600)), mload(add(transcript, 0x700)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4620)), mload(add(transcript, 0x720)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4640)), mload(add(transcript, 0x740)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4660)), mload(add(transcript, 0x760)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4680)), mload(add(transcript, 0x780)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x46a0)), mload(add(transcript, 0x7a0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x46c0)), mload(add(transcript, 0x7c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x46e0)), mload(add(transcript, 0x7e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4700)), mload(add(transcript, 0x800)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4720)), mload(add(transcript, 0x820)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4740)), mload(add(transcript, 0x840)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4760)), mload(add(transcript, 0x860)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4780)), mload(add(transcript, 0x880)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x47a0)), mload(add(transcript, 0x8a0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x47c0)), mload(add(transcript, 0x8c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x47e0)), mload(add(transcript, 0x8e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4800)), mload(add(transcript, 0x900)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4820)), mload(add(transcript, 0x920)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4840)), mload(add(transcript, 0x940)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4860)), mload(add(transcript, 0x960)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4880)), mload(add(transcript, 0x980)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x48a0)), mload(add(transcript, 0x9a0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x48c0)), mload(add(transcript, 0x9c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x48e0)), mload(add(transcript, 0x9e0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4900)), mload(add(transcript, 0xa00)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4920)), mload(add(transcript, 0xa20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4940)), mload(add(transcript, 0xa40)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4960)), mload(add(transcript, 0xa60)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4980)), mload(add(transcript, 0xa80)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x49a0)), mload(add(transcript, 0xaa0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x49c0)), mload(add(transcript, 0xac0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x49e0)), mload(add(transcript, 0xae0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4a00)), mload(add(transcript, 0xb00)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4a20)), mload(add(transcript, 0xb20)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4a40)), mload(add(transcript, 0xb40)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4a60)), mload(add(transcript, 0xb60)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4a80)), mload(add(transcript, 0xb80)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x4aa0)), mload(add(transcript, 0xba0)), f_q), result, f_q)mstore(add(transcript, 0x4ac0), result)        }
mstore(add(transcript, 0x4ae0), mulmod(mload(add(transcript, 0x1060)), mload(add(transcript, 0x1040)), f_q))
mstore(add(transcript, 0x4b00), addmod(mload(add(transcript, 0x1020)), mload(add(transcript, 0x4ae0)), f_q))
mstore(add(transcript, 0x4b20), addmod(mload(add(transcript, 0x4b00)), sub(f_q, mload(add(transcript, 0x1080))), f_q))
mstore(add(transcript, 0x4b40), mulmod(mload(add(transcript, 0x4b20)), mload(add(transcript, 0x1100)), f_q))
mstore(add(transcript, 0x4b60), mulmod(mload(add(transcript, 0xe80)), mload(add(transcript, 0x4b40)), f_q))
mstore(add(transcript, 0x4b80), addmod(1, sub(f_q, mload(add(transcript, 0x11a0))), f_q))
mstore(add(transcript, 0x4ba0), mulmod(mload(add(transcript, 0x4b80)), mload(add(transcript, 0x3f20)), f_q))
mstore(add(transcript, 0x4bc0), addmod(mload(add(transcript, 0x4b60)), mload(add(transcript, 0x4ba0)), f_q))
mstore(add(transcript, 0x4be0), mulmod(mload(add(transcript, 0xe80)), mload(add(transcript, 0x4bc0)), f_q))
mstore(add(transcript, 0x4c00), mulmod(mload(add(transcript, 0x11a0)), mload(add(transcript, 0x11a0)), f_q))
mstore(add(transcript, 0x4c20), addmod(mload(add(transcript, 0x4c00)), sub(f_q, mload(add(transcript, 0x11a0))), f_q))
mstore(add(transcript, 0x4c40), mulmod(mload(add(transcript, 0x4c20)), mload(add(transcript, 0x3e40)), f_q))
mstore(add(transcript, 0x4c60), addmod(mload(add(transcript, 0x4be0)), mload(add(transcript, 0x4c40)), f_q))
mstore(add(transcript, 0x4c80), mulmod(mload(add(transcript, 0xe80)), mload(add(transcript, 0x4c60)), f_q))
mstore(add(transcript, 0x4ca0), addmod(1, sub(f_q, mload(add(transcript, 0x3e40))), f_q))
mstore(add(transcript, 0x4cc0), addmod(mload(add(transcript, 0x3e60)), mload(add(transcript, 0x3e80)), f_q))
mstore(add(transcript, 0x4ce0), addmod(mload(add(transcript, 0x4cc0)), mload(add(transcript, 0x3ea0)), f_q))
mstore(add(transcript, 0x4d00), addmod(mload(add(transcript, 0x4ce0)), mload(add(transcript, 0x3ec0)), f_q))
mstore(add(transcript, 0x4d20), addmod(mload(add(transcript, 0x4d00)), mload(add(transcript, 0x3ee0)), f_q))
mstore(add(transcript, 0x4d40), addmod(mload(add(transcript, 0x4d20)), mload(add(transcript, 0x3f00)), f_q))
mstore(add(transcript, 0x4d60), addmod(mload(add(transcript, 0x4ca0)), sub(f_q, mload(add(transcript, 0x4d40))), f_q))
mstore(add(transcript, 0x4d80), mulmod(mload(add(transcript, 0x1140)), mload(add(transcript, 0xd00)), f_q))
mstore(add(transcript, 0x4da0), addmod(mload(add(transcript, 0x10a0)), mload(add(transcript, 0x4d80)), f_q))
mstore(add(transcript, 0x4dc0), addmod(mload(add(transcript, 0x4da0)), mload(add(transcript, 0xd60)), f_q))
mstore(add(transcript, 0x4de0), mulmod(mload(add(transcript, 0x1160)), mload(add(transcript, 0xd00)), f_q))
mstore(add(transcript, 0x4e00), addmod(mload(add(transcript, 0x1020)), mload(add(transcript, 0x4de0)), f_q))
mstore(add(transcript, 0x4e20), addmod(mload(add(transcript, 0x4e00)), mload(add(transcript, 0xd60)), f_q))
mstore(add(transcript, 0x4e40), mulmod(mload(add(transcript, 0x4e20)), mload(add(transcript, 0x4dc0)), f_q))
mstore(add(transcript, 0x4e60), mulmod(mload(add(transcript, 0x1180)), mload(add(transcript, 0xd00)), f_q))
mstore(add(transcript, 0x4e80), addmod(mload(add(transcript, 0x4ac0)), mload(add(transcript, 0x4e60)), f_q))
mstore(add(transcript, 0x4ea0), addmod(mload(add(transcript, 0x4e80)), mload(add(transcript, 0xd60)), f_q))
mstore(add(transcript, 0x4ec0), mulmod(mload(add(transcript, 0x4ea0)), mload(add(transcript, 0x4e40)), f_q))
mstore(add(transcript, 0x4ee0), mulmod(mload(add(transcript, 0x4ec0)), mload(add(transcript, 0x11c0)), f_q))
mstore(add(transcript, 0x4f00), mulmod(1, mload(add(transcript, 0xd00)), f_q))
mstore(add(transcript, 0x4f20), mulmod(mload(add(transcript, 0xfe0)), mload(add(transcript, 0x4f00)), f_q))
mstore(add(transcript, 0x4f40), addmod(mload(add(transcript, 0x10a0)), mload(add(transcript, 0x4f20)), f_q))
mstore(add(transcript, 0x4f60), addmod(mload(add(transcript, 0x4f40)), mload(add(transcript, 0xd60)), f_q))
mstore(add(transcript, 0x4f80), mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(add(transcript, 0xd00)), f_q))
mstore(add(transcript, 0x4fa0), mulmod(mload(add(transcript, 0xfe0)), mload(add(transcript, 0x4f80)), f_q))
mstore(add(transcript, 0x4fc0), addmod(mload(add(transcript, 0x1020)), mload(add(transcript, 0x4fa0)), f_q))
mstore(add(transcript, 0x4fe0), addmod(mload(add(transcript, 0x4fc0)), mload(add(transcript, 0xd60)), f_q))
mstore(add(transcript, 0x5000), mulmod(mload(add(transcript, 0x4fe0)), mload(add(transcript, 0x4f60)), f_q))
mstore(add(transcript, 0x5020), mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(add(transcript, 0xd00)), f_q))
mstore(add(transcript, 0x5040), mulmod(mload(add(transcript, 0xfe0)), mload(add(transcript, 0x5020)), f_q))
mstore(add(transcript, 0x5060), addmod(mload(add(transcript, 0x4ac0)), mload(add(transcript, 0x5040)), f_q))
mstore(add(transcript, 0x5080), addmod(mload(add(transcript, 0x5060)), mload(add(transcript, 0xd60)), f_q))
mstore(add(transcript, 0x50a0), mulmod(mload(add(transcript, 0x5080)), mload(add(transcript, 0x5000)), f_q))
mstore(add(transcript, 0x50c0), mulmod(mload(add(transcript, 0x50a0)), mload(add(transcript, 0x11a0)), f_q))
mstore(add(transcript, 0x50e0), addmod(mload(add(transcript, 0x4ee0)), sub(f_q, mload(add(transcript, 0x50c0))), f_q))
mstore(add(transcript, 0x5100), mulmod(mload(add(transcript, 0x50e0)), mload(add(transcript, 0x4d60)), f_q))
mstore(add(transcript, 0x5120), addmod(mload(add(transcript, 0x4c80)), mload(add(transcript, 0x5100)), f_q))
mstore(add(transcript, 0x5140), mulmod(mload(add(transcript, 0xe80)), mload(add(transcript, 0x5120)), f_q))
mstore(add(transcript, 0x5160), addmod(1, sub(f_q, mload(add(transcript, 0x11e0))), f_q))
mstore(add(transcript, 0x5180), mulmod(mload(add(transcript, 0x5160)), mload(add(transcript, 0x3f20)), f_q))
mstore(add(transcript, 0x51a0), addmod(mload(add(transcript, 0x5140)), mload(add(transcript, 0x5180)), f_q))
mstore(add(transcript, 0x51c0), mulmod(mload(add(transcript, 0xe80)), mload(add(transcript, 0x51a0)), f_q))
mstore(add(transcript, 0x51e0), mulmod(mload(add(transcript, 0x11e0)), mload(add(transcript, 0x11e0)), f_q))
mstore(add(transcript, 0x5200), addmod(mload(add(transcript, 0x51e0)), sub(f_q, mload(add(transcript, 0x11e0))), f_q))
mstore(add(transcript, 0x5220), mulmod(mload(add(transcript, 0x5200)), mload(add(transcript, 0x3e40)), f_q))
mstore(add(transcript, 0x5240), addmod(mload(add(transcript, 0x51c0)), mload(add(transcript, 0x5220)), f_q))
mstore(add(transcript, 0x5260), mulmod(mload(add(transcript, 0xe80)), mload(add(transcript, 0x5240)), f_q))
mstore(add(transcript, 0x5280), addmod(mload(add(transcript, 0x1220)), mload(add(transcript, 0xd00)), f_q))
mstore(add(transcript, 0x52a0), mulmod(mload(add(transcript, 0x5280)), mload(add(transcript, 0x1200)), f_q))
mstore(add(transcript, 0x52c0), addmod(mload(add(transcript, 0x1260)), mload(add(transcript, 0xd60)), f_q))
mstore(add(transcript, 0x52e0), mulmod(mload(add(transcript, 0x52c0)), mload(add(transcript, 0x52a0)), f_q))
mstore(add(transcript, 0x5300), mulmod(mload(add(transcript, 0x1020)), mload(add(transcript, 0x10e0)), f_q))
mstore(add(transcript, 0x5320), addmod(mload(add(transcript, 0x5300)), mload(add(transcript, 0xd00)), f_q))
mstore(add(transcript, 0x5340), mulmod(mload(add(transcript, 0x5320)), mload(add(transcript, 0x11e0)), f_q))
mstore(add(transcript, 0x5360), addmod(mload(add(transcript, 0x10c0)), mload(add(transcript, 0xd60)), f_q))
mstore(add(transcript, 0x5380), mulmod(mload(add(transcript, 0x5360)), mload(add(transcript, 0x5340)), f_q))
mstore(add(transcript, 0x53a0), addmod(mload(add(transcript, 0x52e0)), sub(f_q, mload(add(transcript, 0x5380))), f_q))
mstore(add(transcript, 0x53c0), mulmod(mload(add(transcript, 0x53a0)), mload(add(transcript, 0x4d60)), f_q))
mstore(add(transcript, 0x53e0), addmod(mload(add(transcript, 0x5260)), mload(add(transcript, 0x53c0)), f_q))
mstore(add(transcript, 0x5400), mulmod(mload(add(transcript, 0xe80)), mload(add(transcript, 0x53e0)), f_q))
mstore(add(transcript, 0x5420), addmod(mload(add(transcript, 0x1220)), sub(f_q, mload(add(transcript, 0x1260))), f_q))
mstore(add(transcript, 0x5440), mulmod(mload(add(transcript, 0x5420)), mload(add(transcript, 0x3f20)), f_q))
mstore(add(transcript, 0x5460), addmod(mload(add(transcript, 0x5400)), mload(add(transcript, 0x5440)), f_q))
mstore(add(transcript, 0x5480), mulmod(mload(add(transcript, 0xe80)), mload(add(transcript, 0x5460)), f_q))
mstore(add(transcript, 0x54a0), mulmod(mload(add(transcript, 0x5420)), mload(add(transcript, 0x4d60)), f_q))
mstore(add(transcript, 0x54c0), addmod(mload(add(transcript, 0x1220)), sub(f_q, mload(add(transcript, 0x1240))), f_q))
mstore(add(transcript, 0x54e0), mulmod(mload(add(transcript, 0x54c0)), mload(add(transcript, 0x54a0)), f_q))
mstore(add(transcript, 0x5500), addmod(mload(add(transcript, 0x5480)), mload(add(transcript, 0x54e0)), f_q))
mstore(add(transcript, 0x5520), mulmod(mload(add(transcript, 0x1780)), mload(add(transcript, 0x1780)), f_q))
mstore(add(transcript, 0x5540), mulmod(mload(add(transcript, 0x5520)), mload(add(transcript, 0x1780)), f_q))
mstore(add(transcript, 0x5560), mulmod(mload(add(transcript, 0x5540)), mload(add(transcript, 0x1780)), f_q))
mstore(add(transcript, 0x5580), mulmod(1, mload(add(transcript, 0x1780)), f_q))
mstore(add(transcript, 0x55a0), mulmod(1, mload(add(transcript, 0x5520)), f_q))
mstore(add(transcript, 0x55c0), mulmod(1, mload(add(transcript, 0x5540)), f_q))
mstore(add(transcript, 0x55e0), mulmod(mload(add(transcript, 0x5500)), mload(add(transcript, 0x17a0)), f_q))
mstore(add(transcript, 0x5600), mulmod(mload(add(transcript, 0x14a0)), mload(add(transcript, 0xfe0)), f_q))
mstore(add(transcript, 0x5620), mulmod(mload(add(transcript, 0x5600)), mload(add(transcript, 0xfe0)), f_q))
mstore(add(transcript, 0x5640), mulmod(mload(add(transcript, 0xfe0)), 1, f_q))
mstore(add(transcript, 0x5660), addmod(mload(add(transcript, 0x13a0)), sub(f_q, mload(add(transcript, 0x5640))), f_q))
mstore(add(transcript, 0x5680), mulmod(mload(add(transcript, 0xfe0)), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
mstore(add(transcript, 0x56a0), addmod(mload(add(transcript, 0x13a0)), sub(f_q, mload(add(transcript, 0x5680))), f_q))
mstore(add(transcript, 0x56c0), mulmod(mload(add(transcript, 0xfe0)), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
mstore(add(transcript, 0x56e0), addmod(mload(add(transcript, 0x13a0)), sub(f_q, mload(add(transcript, 0x56c0))), f_q))
mstore(add(transcript, 0x5700), mulmod(mload(add(transcript, 0xfe0)), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
mstore(add(transcript, 0x5720), addmod(mload(add(transcript, 0x13a0)), sub(f_q, mload(add(transcript, 0x5700))), f_q))
mstore(add(transcript, 0x5740), mulmod(mload(add(transcript, 0xfe0)), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
mstore(add(transcript, 0x5760), addmod(mload(add(transcript, 0x13a0)), sub(f_q, mload(add(transcript, 0x5740))), f_q))
{            let result := mulmod(mload(add(transcript, 0x13a0)), mulmod(mload(add(transcript, 0x5600)), 6616149745577394522356295102346368305374051634342887004165528916468992151333, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0xfe0)), mulmod(mload(add(transcript, 0x5600)), 15272093126261880699890110642910906783174312766073147339532675270106816344284, f_q), f_q), result, f_q)mstore(add(transcript, 0x5780), result)        }
{            let result := mulmod(mload(add(transcript, 0x13a0)), mulmod(mload(add(transcript, 0x5600)), 530501691302793820034524283154921640443166880847115433758691660016816186416, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0xfe0)), mulmod(mload(add(transcript, 0x5600)), 6735468303947967792722299167169712601265763928443086612877978228369959138708, f_q), f_q), result, f_q)mstore(add(transcript, 0x57a0), result)        }
{            let result := mulmod(mload(add(transcript, 0x13a0)), mulmod(mload(add(transcript, 0x5600)), 6735468303947967792722299167169712601265763928443086612877978228369959138708, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0xfe0)), mulmod(mload(add(transcript, 0x5600)), 21402573809525492531235934453699988060841876665026314791644170130242704768864, f_q), f_q), result, f_q)mstore(add(transcript, 0x57c0), result)        }
{            let result := mulmod(mload(add(transcript, 0x13a0)), mulmod(mload(add(transcript, 0x5600)), 21558793644302942916864965630979640748886316167261336210841195936026980690666, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0xfe0)), mulmod(mload(add(transcript, 0x5600)), 21647881284526053590463969745634050372655996593461286860577821962674562513632, f_q), f_q), result, f_q)mstore(add(transcript, 0x57e0), result)        }
mstore(add(transcript, 0x5800), mulmod(1, mload(add(transcript, 0x5660)), f_q))
mstore(add(transcript, 0x5820), mulmod(mload(add(transcript, 0x5800)), mload(add(transcript, 0x56e0)), f_q))
mstore(add(transcript, 0x5840), mulmod(mload(add(transcript, 0x5820)), mload(add(transcript, 0x56a0)), f_q))
mstore(add(transcript, 0x5860), mulmod(mload(add(transcript, 0x5840)), mload(add(transcript, 0x5760)), f_q))
{            let result := mulmod(mload(add(transcript, 0x13a0)), mulmod(mload(add(transcript, 0xfe0)), 10436837293141318478790164891277058815157809665667237910671663755188835910967, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0xfe0)), mulmod(mload(add(transcript, 0xfe0)), 11451405578697956743456240853980216273390554734748796433026540431386972584650, f_q), f_q), result, f_q)mstore(add(transcript, 0x5880), result)        }
{            let result := mulmod(mload(add(transcript, 0x13a0)), mulmod(mload(add(transcript, 0xfe0)), 11451405578697956743456240853980216273390554734748796433026540431386972584650, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0xfe0)), mulmod(mload(add(transcript, 0xfe0)), 3077030613389546641045167241996204396678989417006994932586784657914895987304, f_q), f_q), result, f_q)mstore(add(transcript, 0x58a0), result)        }
{            let result := mulmod(mload(add(transcript, 0x13a0)), mulmod(mload(add(transcript, 0xfe0)), 4558794634599160729665540001169218674296628713450539706539395399156027320108, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0xfe0)), mulmod(mload(add(transcript, 0xfe0)), 17329448237240114492580865744088056414251735686965494637158808787419781175509, f_q), f_q), result, f_q)mstore(add(transcript, 0x58c0), result)        }
{            let result := mulmod(mload(add(transcript, 0x13a0)), mulmod(mload(add(transcript, 0xfe0)), 17329448237240114492580865744088056414251735686965494637158808787419781175509, f_q), f_q)result := addmod(mulmod(mload(add(transcript, 0xfe0)), mulmod(mload(add(transcript, 0xfe0)), 7587894345819650164285585254437911847348718480492193252124775402539837301163, f_q), f_q), result, f_q)mstore(add(transcript, 0x58e0), result)        }
mstore(add(transcript, 0x5900), mulmod(mload(add(transcript, 0x5800)), mload(add(transcript, 0x5720)), f_q))
{            let result := mulmod(mload(add(transcript, 0x13a0)), 1, f_q)result := addmod(mulmod(mload(add(transcript, 0xfe0)), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)mstore(add(transcript, 0x5920), result)        }
{            let prod := mload(add(transcript, 0x5780))                prod := mulmod(mload(add(transcript, 0x57a0)), prod, f_q)                mstore(add(transcript, 0x5940), prod)                            prod := mulmod(mload(add(transcript, 0x57c0)), prod, f_q)                mstore(add(transcript, 0x5960), prod)                            prod := mulmod(mload(add(transcript, 0x57e0)), prod, f_q)                mstore(add(transcript, 0x5980), prod)                            prod := mulmod(mload(add(transcript, 0x5880)), prod, f_q)                mstore(add(transcript, 0x59a0), prod)                            prod := mulmod(mload(add(transcript, 0x58a0)), prod, f_q)                mstore(add(transcript, 0x59c0), prod)                            prod := mulmod(mload(add(transcript, 0x5820)), prod, f_q)                mstore(add(transcript, 0x59e0), prod)                            prod := mulmod(mload(add(transcript, 0x58c0)), prod, f_q)                mstore(add(transcript, 0x5a00), prod)                            prod := mulmod(mload(add(transcript, 0x58e0)), prod, f_q)                mstore(add(transcript, 0x5a20), prod)                            prod := mulmod(mload(add(transcript, 0x5900)), prod, f_q)                mstore(add(transcript, 0x5a40), prod)                            prod := mulmod(mload(add(transcript, 0x5920)), prod, f_q)                mstore(add(transcript, 0x5a60), prod)                            prod := mulmod(mload(add(transcript, 0x5800)), prod, f_q)                mstore(add(transcript, 0x5a80), prod)                    }
mstore(add(transcript, 0x5ac0), 32)
mstore(add(transcript, 0x5ae0), 32)
mstore(add(transcript, 0x5b00), 32)
mstore(add(transcript, 0x5b20), mload(add(transcript, 0x5a80)))
mstore(add(transcript, 0x5b40), 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(add(transcript, 0x5b60), 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, add(transcript, 0x5ac0), 0xc0, add(transcript, 0x5aa0), 0x20), 1), success)
{                        let inv := mload(add(transcript, 0x5aa0))            let v                            v := mload(add(transcript, 0x5800))                    mstore(add(transcript, 0x5800), mulmod(mload(add(transcript, 0x5a60)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x5920))                    mstore(add(transcript, 0x5920), mulmod(mload(add(transcript, 0x5a40)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x5900))                    mstore(add(transcript, 0x5900), mulmod(mload(add(transcript, 0x5a20)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x58e0))                    mstore(add(transcript, 0x58e0), mulmod(mload(add(transcript, 0x5a00)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x58c0))                    mstore(add(transcript, 0x58c0), mulmod(mload(add(transcript, 0x59e0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x5820))                    mstore(add(transcript, 0x5820), mulmod(mload(add(transcript, 0x59c0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x58a0))                    mstore(add(transcript, 0x58a0), mulmod(mload(add(transcript, 0x59a0)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x5880))                    mstore(add(transcript, 0x5880), mulmod(mload(add(transcript, 0x5980)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x57e0))                    mstore(add(transcript, 0x57e0), mulmod(mload(add(transcript, 0x5960)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x57c0))                    mstore(add(transcript, 0x57c0), mulmod(mload(add(transcript, 0x5940)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x57a0))                    mstore(add(transcript, 0x57a0), mulmod(mload(add(transcript, 0x5780)), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(add(transcript, 0x5780), inv)        }
{            let result := mload(add(transcript, 0x5780))result := addmod(mload(add(transcript, 0x57a0)), result, f_q)result := addmod(mload(add(transcript, 0x57c0)), result, f_q)result := addmod(mload(add(transcript, 0x57e0)), result, f_q)mstore(add(transcript, 0x5b80), result)        }
mstore(add(transcript, 0x5ba0), mulmod(mload(add(transcript, 0x5860)), mload(add(transcript, 0x5820)), f_q))
{            let result := mload(add(transcript, 0x5880))result := addmod(mload(add(transcript, 0x58a0)), result, f_q)mstore(add(transcript, 0x5bc0), result)        }
mstore(add(transcript, 0x5be0), mulmod(mload(add(transcript, 0x5860)), mload(add(transcript, 0x5900)), f_q))
{            let result := mload(add(transcript, 0x58c0))result := addmod(mload(add(transcript, 0x58e0)), result, f_q)mstore(add(transcript, 0x5c00), result)        }
mstore(add(transcript, 0x5c20), mulmod(mload(add(transcript, 0x5860)), mload(add(transcript, 0x5800)), f_q))
{            let result := mload(add(transcript, 0x5920))mstore(add(transcript, 0x5c40), result)        }
{            let prod := mload(add(transcript, 0x5b80))                prod := mulmod(mload(add(transcript, 0x5bc0)), prod, f_q)                mstore(add(transcript, 0x5c60), prod)                            prod := mulmod(mload(add(transcript, 0x5c00)), prod, f_q)                mstore(add(transcript, 0x5c80), prod)                            prod := mulmod(mload(add(transcript, 0x5c40)), prod, f_q)                mstore(add(transcript, 0x5ca0), prod)                    }
mstore(add(transcript, 0x5ce0), 32)
mstore(add(transcript, 0x5d00), 32)
mstore(add(transcript, 0x5d20), 32)
mstore(add(transcript, 0x5d40), mload(add(transcript, 0x5ca0)))
mstore(add(transcript, 0x5d60), 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(add(transcript, 0x5d80), 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, add(transcript, 0x5ce0), 0xc0, add(transcript, 0x5cc0), 0x20), 1), success)
{                        let inv := mload(add(transcript, 0x5cc0))            let v                            v := mload(add(transcript, 0x5c40))                    mstore(add(transcript, 0x5c40), mulmod(mload(add(transcript, 0x5c80)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x5c00))                    mstore(add(transcript, 0x5c00), mulmod(mload(add(transcript, 0x5c60)), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(add(transcript, 0x5bc0))                    mstore(add(transcript, 0x5bc0), mulmod(mload(add(transcript, 0x5b80)), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(add(transcript, 0x5b80), inv)        }
mstore(add(transcript, 0x5da0), mulmod(mload(add(transcript, 0x5ba0)), mload(add(transcript, 0x5bc0)), f_q))
mstore(add(transcript, 0x5dc0), mulmod(mload(add(transcript, 0x5be0)), mload(add(transcript, 0x5c00)), f_q))
mstore(add(transcript, 0x5de0), mulmod(mload(add(transcript, 0x5c20)), mload(add(transcript, 0x5c40)), f_q))
mstore(add(transcript, 0x5e00), mulmod(mload(add(transcript, 0x12a0)), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x5e20), mulmod(mload(add(transcript, 0x5e00)), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x5e40), mulmod(mload(add(transcript, 0x5e20)), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x5e60), mulmod(mload(add(transcript, 0x5e40)), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x5e80), mulmod(mload(add(transcript, 0x5e60)), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x5ea0), mulmod(mload(add(transcript, 0x5e80)), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x5ec0), mulmod(mload(add(transcript, 0x5ea0)), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x5ee0), mulmod(mload(add(transcript, 0x5ec0)), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x5f00), mulmod(mload(add(transcript, 0x5ee0)), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x5f20), mulmod(mload(add(transcript, 0x1300)), mload(add(transcript, 0x1300)), f_q))
mstore(add(transcript, 0x5f40), mulmod(mload(add(transcript, 0x5f20)), mload(add(transcript, 0x1300)), f_q))
mstore(add(transcript, 0x5f60), mulmod(mload(add(transcript, 0x5f40)), mload(add(transcript, 0x1300)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1020)), mload(add(transcript, 0x5780)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1040)), mload(add(transcript, 0x57a0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x1060)), mload(add(transcript, 0x57c0)), f_q), result, f_q)result := addmod(mulmod(mload(add(transcript, 0x1080)), mload(add(transcript, 0x57e0)), f_q), result, f_q)mstore(add(transcript, 0x5f80), result)        }
mstore(add(transcript, 0x5fa0), mulmod(mload(add(transcript, 0x5f80)), mload(add(transcript, 0x5b80)), f_q))
mstore(add(transcript, 0x5fc0), mulmod(sub(f_q, mload(add(transcript, 0x5fa0))), 1, f_q))
mstore(add(transcript, 0x5fe0), mulmod(mload(add(transcript, 0x5fc0)), 1, f_q))
mstore(add(transcript, 0x6000), mulmod(1, mload(add(transcript, 0x5ba0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x11a0)), mload(add(transcript, 0x5880)), f_q)result := addmod(mulmod(mload(add(transcript, 0x11c0)), mload(add(transcript, 0x58a0)), f_q), result, f_q)mstore(add(transcript, 0x6020), result)        }
mstore(add(transcript, 0x6040), mulmod(mload(add(transcript, 0x6020)), mload(add(transcript, 0x5da0)), f_q))
mstore(add(transcript, 0x6060), mulmod(sub(f_q, mload(add(transcript, 0x6040))), 1, f_q))
mstore(add(transcript, 0x6080), mulmod(mload(add(transcript, 0x6000)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x11e0)), mload(add(transcript, 0x5880)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1200)), mload(add(transcript, 0x58a0)), f_q), result, f_q)mstore(add(transcript, 0x60a0), result)        }
mstore(add(transcript, 0x60c0), mulmod(mload(add(transcript, 0x60a0)), mload(add(transcript, 0x5da0)), f_q))
mstore(add(transcript, 0x60e0), mulmod(sub(f_q, mload(add(transcript, 0x60c0))), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x6100), mulmod(mload(add(transcript, 0x6000)), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x6120), addmod(mload(add(transcript, 0x6060)), mload(add(transcript, 0x60e0)), f_q))
mstore(add(transcript, 0x6140), mulmod(mload(add(transcript, 0x6120)), mload(add(transcript, 0x1300)), f_q))
mstore(add(transcript, 0x6160), mulmod(mload(add(transcript, 0x6080)), mload(add(transcript, 0x1300)), f_q))
mstore(add(transcript, 0x6180), mulmod(mload(add(transcript, 0x6100)), mload(add(transcript, 0x1300)), f_q))
mstore(add(transcript, 0x61a0), addmod(mload(add(transcript, 0x5fe0)), mload(add(transcript, 0x6140)), f_q))
mstore(add(transcript, 0x61c0), mulmod(1, mload(add(transcript, 0x5be0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1220)), mload(add(transcript, 0x58c0)), f_q)result := addmod(mulmod(mload(add(transcript, 0x1240)), mload(add(transcript, 0x58e0)), f_q), result, f_q)mstore(add(transcript, 0x61e0), result)        }
mstore(add(transcript, 0x6200), mulmod(mload(add(transcript, 0x61e0)), mload(add(transcript, 0x5dc0)), f_q))
mstore(add(transcript, 0x6220), mulmod(sub(f_q, mload(add(transcript, 0x6200))), 1, f_q))
mstore(add(transcript, 0x6240), mulmod(mload(add(transcript, 0x61c0)), 1, f_q))
mstore(add(transcript, 0x6260), mulmod(mload(add(transcript, 0x6220)), mload(add(transcript, 0x5f20)), f_q))
mstore(add(transcript, 0x6280), mulmod(mload(add(transcript, 0x6240)), mload(add(transcript, 0x5f20)), f_q))
mstore(add(transcript, 0x62a0), addmod(mload(add(transcript, 0x61a0)), mload(add(transcript, 0x6260)), f_q))
mstore(add(transcript, 0x62c0), mulmod(1, mload(add(transcript, 0x5c20)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1260)), mload(add(transcript, 0x5920)), f_q)mstore(add(transcript, 0x62e0), result)        }
mstore(add(transcript, 0x6300), mulmod(mload(add(transcript, 0x62e0)), mload(add(transcript, 0x5de0)), f_q))
mstore(add(transcript, 0x6320), mulmod(sub(f_q, mload(add(transcript, 0x6300))), 1, f_q))
mstore(add(transcript, 0x6340), mulmod(mload(add(transcript, 0x62c0)), 1, f_q))
{            let result := mulmod(mload(add(transcript, 0x10a0)), mload(add(transcript, 0x5920)), f_q)mstore(add(transcript, 0x6360), result)        }
mstore(add(transcript, 0x6380), mulmod(mload(add(transcript, 0x6360)), mload(add(transcript, 0x5de0)), f_q))
mstore(add(transcript, 0x63a0), mulmod(sub(f_q, mload(add(transcript, 0x6380))), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x63c0), mulmod(mload(add(transcript, 0x62c0)), mload(add(transcript, 0x12a0)), f_q))
mstore(add(transcript, 0x63e0), addmod(mload(add(transcript, 0x6320)), mload(add(transcript, 0x63a0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x10c0)), mload(add(transcript, 0x5920)), f_q)mstore(add(transcript, 0x6400), result)        }
mstore(add(transcript, 0x6420), mulmod(mload(add(transcript, 0x6400)), mload(add(transcript, 0x5de0)), f_q))
mstore(add(transcript, 0x6440), mulmod(sub(f_q, mload(add(transcript, 0x6420))), mload(add(transcript, 0x5e00)), f_q))
mstore(add(transcript, 0x6460), mulmod(mload(add(transcript, 0x62c0)), mload(add(transcript, 0x5e00)), f_q))
mstore(add(transcript, 0x6480), addmod(mload(add(transcript, 0x63e0)), mload(add(transcript, 0x6440)), f_q))
{            let result := mulmod(mload(add(transcript, 0x10e0)), mload(add(transcript, 0x5920)), f_q)mstore(add(transcript, 0x64a0), result)        }
mstore(add(transcript, 0x64c0), mulmod(mload(add(transcript, 0x64a0)), mload(add(transcript, 0x5de0)), f_q))
mstore(add(transcript, 0x64e0), mulmod(sub(f_q, mload(add(transcript, 0x64c0))), mload(add(transcript, 0x5e20)), f_q))
mstore(add(transcript, 0x6500), mulmod(mload(add(transcript, 0x62c0)), mload(add(transcript, 0x5e20)), f_q))
mstore(add(transcript, 0x6520), addmod(mload(add(transcript, 0x6480)), mload(add(transcript, 0x64e0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1100)), mload(add(transcript, 0x5920)), f_q)mstore(add(transcript, 0x6540), result)        }
mstore(add(transcript, 0x6560), mulmod(mload(add(transcript, 0x6540)), mload(add(transcript, 0x5de0)), f_q))
mstore(add(transcript, 0x6580), mulmod(sub(f_q, mload(add(transcript, 0x6560))), mload(add(transcript, 0x5e40)), f_q))
mstore(add(transcript, 0x65a0), mulmod(mload(add(transcript, 0x62c0)), mload(add(transcript, 0x5e40)), f_q))
mstore(add(transcript, 0x65c0), addmod(mload(add(transcript, 0x6520)), mload(add(transcript, 0x6580)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1140)), mload(add(transcript, 0x5920)), f_q)mstore(add(transcript, 0x65e0), result)        }
mstore(add(transcript, 0x6600), mulmod(mload(add(transcript, 0x65e0)), mload(add(transcript, 0x5de0)), f_q))
mstore(add(transcript, 0x6620), mulmod(sub(f_q, mload(add(transcript, 0x6600))), mload(add(transcript, 0x5e60)), f_q))
mstore(add(transcript, 0x6640), mulmod(mload(add(transcript, 0x62c0)), mload(add(transcript, 0x5e60)), f_q))
mstore(add(transcript, 0x6660), addmod(mload(add(transcript, 0x65c0)), mload(add(transcript, 0x6620)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1160)), mload(add(transcript, 0x5920)), f_q)mstore(add(transcript, 0x6680), result)        }
mstore(add(transcript, 0x66a0), mulmod(mload(add(transcript, 0x6680)), mload(add(transcript, 0x5de0)), f_q))
mstore(add(transcript, 0x66c0), mulmod(sub(f_q, mload(add(transcript, 0x66a0))), mload(add(transcript, 0x5e80)), f_q))
mstore(add(transcript, 0x66e0), mulmod(mload(add(transcript, 0x62c0)), mload(add(transcript, 0x5e80)), f_q))
mstore(add(transcript, 0x6700), addmod(mload(add(transcript, 0x6660)), mload(add(transcript, 0x66c0)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1180)), mload(add(transcript, 0x5920)), f_q)mstore(add(transcript, 0x6720), result)        }
mstore(add(transcript, 0x6740), mulmod(mload(add(transcript, 0x6720)), mload(add(transcript, 0x5de0)), f_q))
mstore(add(transcript, 0x6760), mulmod(sub(f_q, mload(add(transcript, 0x6740))), mload(add(transcript, 0x5ea0)), f_q))
mstore(add(transcript, 0x6780), mulmod(mload(add(transcript, 0x62c0)), mload(add(transcript, 0x5ea0)), f_q))
mstore(add(transcript, 0x67a0), addmod(mload(add(transcript, 0x6700)), mload(add(transcript, 0x6760)), f_q))
mstore(add(transcript, 0x67c0), mulmod(mload(add(transcript, 0x5580)), mload(add(transcript, 0x5c20)), f_q))
mstore(add(transcript, 0x67e0), mulmod(mload(add(transcript, 0x55a0)), mload(add(transcript, 0x5c20)), f_q))
mstore(add(transcript, 0x6800), mulmod(mload(add(transcript, 0x55c0)), mload(add(transcript, 0x5c20)), f_q))
{            let result := mulmod(mload(add(transcript, 0x55e0)), mload(add(transcript, 0x5920)), f_q)mstore(add(transcript, 0x6820), result)        }
mstore(add(transcript, 0x6840), mulmod(mload(add(transcript, 0x6820)), mload(add(transcript, 0x5de0)), f_q))
mstore(add(transcript, 0x6860), mulmod(sub(f_q, mload(add(transcript, 0x6840))), mload(add(transcript, 0x5ec0)), f_q))
mstore(add(transcript, 0x6880), mulmod(mload(add(transcript, 0x62c0)), mload(add(transcript, 0x5ec0)), f_q))
mstore(add(transcript, 0x68a0), mulmod(mload(add(transcript, 0x67c0)), mload(add(transcript, 0x5ec0)), f_q))
mstore(add(transcript, 0x68c0), mulmod(mload(add(transcript, 0x67e0)), mload(add(transcript, 0x5ec0)), f_q))
mstore(add(transcript, 0x68e0), mulmod(mload(add(transcript, 0x6800)), mload(add(transcript, 0x5ec0)), f_q))
mstore(add(transcript, 0x6900), addmod(mload(add(transcript, 0x67a0)), mload(add(transcript, 0x6860)), f_q))
{            let result := mulmod(mload(add(transcript, 0x1120)), mload(add(transcript, 0x5920)), f_q)mstore(add(transcript, 0x6920), result)        }
mstore(add(transcript, 0x6940), mulmod(mload(add(transcript, 0x6920)), mload(add(transcript, 0x5de0)), f_q))
mstore(add(transcript, 0x6960), mulmod(sub(f_q, mload(add(transcript, 0x6940))), mload(add(transcript, 0x5ee0)), f_q))
mstore(add(transcript, 0x6980), mulmod(mload(add(transcript, 0x62c0)), mload(add(transcript, 0x5ee0)), f_q))
mstore(add(transcript, 0x69a0), addmod(mload(add(transcript, 0x6900)), mload(add(transcript, 0x6960)), f_q))
mstore(add(transcript, 0x69c0), mulmod(mload(add(transcript, 0x69a0)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x69e0), mulmod(mload(add(transcript, 0x6340)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6a00), mulmod(mload(add(transcript, 0x63c0)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6a20), mulmod(mload(add(transcript, 0x6460)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6a40), mulmod(mload(add(transcript, 0x6500)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6a60), mulmod(mload(add(transcript, 0x65a0)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6a80), mulmod(mload(add(transcript, 0x6640)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6aa0), mulmod(mload(add(transcript, 0x66e0)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6ac0), mulmod(mload(add(transcript, 0x6780)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6ae0), mulmod(mload(add(transcript, 0x6880)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6b00), mulmod(mload(add(transcript, 0x68a0)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6b20), mulmod(mload(add(transcript, 0x68c0)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6b40), mulmod(mload(add(transcript, 0x68e0)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6b60), mulmod(mload(add(transcript, 0x6980)), mload(add(transcript, 0x5f40)), f_q))
mstore(add(transcript, 0x6b80), addmod(mload(add(transcript, 0x62a0)), mload(add(transcript, 0x69c0)), f_q))
mstore(add(transcript, 0x6ba0), mulmod(1, mload(add(transcript, 0x5860)), f_q))
mstore(add(transcript, 0x6bc0), mulmod(1, mload(add(transcript, 0x13a0)), f_q))
mstore(add(transcript, 0x6be0), 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(add(transcript, 0x6c00), 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(add(transcript, 0x6c20), mload(add(transcript, 0x6b80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6be0), 0x60, add(transcript, 0x6be0), 0x40), 1), success)
mstore(add(transcript, 0x6c40), mload(add(transcript, 0x6be0)))
                    mstore(add(transcript, 0x6c60), mload(add(transcript, 0x6c00)))
mstore(add(transcript, 0x6c80), mload(add(transcript, 0xbc0)))
                    mstore(add(transcript, 0x6ca0), mload(add(transcript, 0xbe0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6c40), 0x80, add(transcript, 0x6c40), 0x40), 1), success)
mstore(add(transcript, 0x6cc0), mload(add(transcript, 0xda0)))
                    mstore(add(transcript, 0x6ce0), mload(add(transcript, 0xdc0)))
mstore(add(transcript, 0x6d00), mload(add(transcript, 0x6160)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6cc0), 0x60, add(transcript, 0x6cc0), 0x40), 1), success)
mstore(add(transcript, 0x6d20), mload(add(transcript, 0x6c40)))
                    mstore(add(transcript, 0x6d40), mload(add(transcript, 0x6c60)))
mstore(add(transcript, 0x6d60), mload(add(transcript, 0x6cc0)))
                    mstore(add(transcript, 0x6d80), mload(add(transcript, 0x6ce0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6d20), 0x80, add(transcript, 0x6d20), 0x40), 1), success)
mstore(add(transcript, 0x6da0), mload(add(transcript, 0xde0)))
                    mstore(add(transcript, 0x6dc0), mload(add(transcript, 0xe00)))
mstore(add(transcript, 0x6de0), mload(add(transcript, 0x6180)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6da0), 0x60, add(transcript, 0x6da0), 0x40), 1), success)
mstore(add(transcript, 0x6e00), mload(add(transcript, 0x6d20)))
                    mstore(add(transcript, 0x6e20), mload(add(transcript, 0x6d40)))
mstore(add(transcript, 0x6e40), mload(add(transcript, 0x6da0)))
                    mstore(add(transcript, 0x6e60), mload(add(transcript, 0x6dc0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6e00), 0x80, add(transcript, 0x6e00), 0x40), 1), success)
mstore(add(transcript, 0x6e80), mload(add(transcript, 0xc60)))
                    mstore(add(transcript, 0x6ea0), mload(add(transcript, 0xc80)))
mstore(add(transcript, 0x6ec0), mload(add(transcript, 0x6280)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6e80), 0x60, add(transcript, 0x6e80), 0x40), 1), success)
mstore(add(transcript, 0x6ee0), mload(add(transcript, 0x6e00)))
                    mstore(add(transcript, 0x6f00), mload(add(transcript, 0x6e20)))
mstore(add(transcript, 0x6f20), mload(add(transcript, 0x6e80)))
                    mstore(add(transcript, 0x6f40), mload(add(transcript, 0x6ea0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6ee0), 0x80, add(transcript, 0x6ee0), 0x40), 1), success)
mstore(add(transcript, 0x6f60), mload(add(transcript, 0xca0)))
                    mstore(add(transcript, 0x6f80), mload(add(transcript, 0xcc0)))
mstore(add(transcript, 0x6fa0), mload(add(transcript, 0x69e0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x6f60), 0x60, add(transcript, 0x6f60), 0x40), 1), success)
mstore(add(transcript, 0x6fc0), mload(add(transcript, 0x6ee0)))
                    mstore(add(transcript, 0x6fe0), mload(add(transcript, 0x6f00)))
mstore(add(transcript, 0x7000), mload(add(transcript, 0x6f60)))
                    mstore(add(transcript, 0x7020), mload(add(transcript, 0x6f80)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x6fc0), 0x80, add(transcript, 0x6fc0), 0x40), 1), success)
mstore(add(transcript, 0x7040), 0x23cf8d0318487945e0450ea6d39755f6a6b5cf5ff68bc69f72f29b8a06fec190)
                    mstore(add(transcript, 0x7060), 0x2b1b6520280d063ba7af910f20c1c051112e461778f8f0035580f2a5a5a8f8bb)
mstore(add(transcript, 0x7080), mload(add(transcript, 0x6a00)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7040), 0x60, add(transcript, 0x7040), 0x40), 1), success)
mstore(add(transcript, 0x70a0), mload(add(transcript, 0x6fc0)))
                    mstore(add(transcript, 0x70c0), mload(add(transcript, 0x6fe0)))
mstore(add(transcript, 0x70e0), mload(add(transcript, 0x7040)))
                    mstore(add(transcript, 0x7100), mload(add(transcript, 0x7060)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x70a0), 0x80, add(transcript, 0x70a0), 0x40), 1), success)
mstore(add(transcript, 0x7120), 0x125da3d762477ea5f12aa54f733d9355ca4dcd03cb9c0491923f4c97b183efdc)
                    mstore(add(transcript, 0x7140), 0x28fe468b65375e2c5da44ba95684ad5fe474897d64cb1a1adb0b2d398d7a65f7)
mstore(add(transcript, 0x7160), mload(add(transcript, 0x6a20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7120), 0x60, add(transcript, 0x7120), 0x40), 1), success)
mstore(add(transcript, 0x7180), mload(add(transcript, 0x70a0)))
                    mstore(add(transcript, 0x71a0), mload(add(transcript, 0x70c0)))
mstore(add(transcript, 0x71c0), mload(add(transcript, 0x7120)))
                    mstore(add(transcript, 0x71e0), mload(add(transcript, 0x7140)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7180), 0x80, add(transcript, 0x7180), 0x40), 1), success)
mstore(add(transcript, 0x7200), 0x07d992ba4bb929b947a61da1e9a283a39182bcfa6e18856bf78af6a1ededb2b7)
                    mstore(add(transcript, 0x7220), 0x1a19e41bddbe21ef7434cf8ae7f7f6fd2e6ae35d282afe35a3372a074375e2be)
mstore(add(transcript, 0x7240), mload(add(transcript, 0x6a40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7200), 0x60, add(transcript, 0x7200), 0x40), 1), success)
mstore(add(transcript, 0x7260), mload(add(transcript, 0x7180)))
                    mstore(add(transcript, 0x7280), mload(add(transcript, 0x71a0)))
mstore(add(transcript, 0x72a0), mload(add(transcript, 0x7200)))
                    mstore(add(transcript, 0x72c0), mload(add(transcript, 0x7220)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7260), 0x80, add(transcript, 0x7260), 0x40), 1), success)
mstore(add(transcript, 0x72e0), 0x0c5ea655b6b7f6f0df6e2f4ced73955c8c9ec9eab70cc6e90fc0be3c5eb3c2d3)
                    mstore(add(transcript, 0x7300), 0x083e0f6500e578f4d12e784b6844467c4067174a27ea21c1c7c2d4b23078ef66)
mstore(add(transcript, 0x7320), mload(add(transcript, 0x6a60)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x72e0), 0x60, add(transcript, 0x72e0), 0x40), 1), success)
mstore(add(transcript, 0x7340), mload(add(transcript, 0x7260)))
                    mstore(add(transcript, 0x7360), mload(add(transcript, 0x7280)))
mstore(add(transcript, 0x7380), mload(add(transcript, 0x72e0)))
                    mstore(add(transcript, 0x73a0), mload(add(transcript, 0x7300)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7340), 0x80, add(transcript, 0x7340), 0x40), 1), success)
mstore(add(transcript, 0x73c0), 0x2d709c95a499022c7ee860012f6689e8acd63d1e60fb74db1301bf67f67110b9)
                    mstore(add(transcript, 0x73e0), 0x1079c00efcea70ff23080409d02c721e804145d223f3630b037917bb129fede1)
mstore(add(transcript, 0x7400), mload(add(transcript, 0x6a80)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x73c0), 0x60, add(transcript, 0x73c0), 0x40), 1), success)
mstore(add(transcript, 0x7420), mload(add(transcript, 0x7340)))
                    mstore(add(transcript, 0x7440), mload(add(transcript, 0x7360)))
mstore(add(transcript, 0x7460), mload(add(transcript, 0x73c0)))
                    mstore(add(transcript, 0x7480), mload(add(transcript, 0x73e0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7420), 0x80, add(transcript, 0x7420), 0x40), 1), success)
mstore(add(transcript, 0x74a0), 0x17e38172ddd4796b03c76e90b6ef23bef8e541fec329002c75ffe108bd6ddcec)
                    mstore(add(transcript, 0x74c0), 0x10012ac44d77dafea27baf5d1c1847ab6344ba97beeea33b6100d2d231a713cf)
mstore(add(transcript, 0x74e0), mload(add(transcript, 0x6aa0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x74a0), 0x60, add(transcript, 0x74a0), 0x40), 1), success)
mstore(add(transcript, 0x7500), mload(add(transcript, 0x7420)))
                    mstore(add(transcript, 0x7520), mload(add(transcript, 0x7440)))
mstore(add(transcript, 0x7540), mload(add(transcript, 0x74a0)))
                    mstore(add(transcript, 0x7560), mload(add(transcript, 0x74c0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7500), 0x80, add(transcript, 0x7500), 0x40), 1), success)
mstore(add(transcript, 0x7580), 0x0003f6f72c760beb9c2712cb6b2ce6d73c8c88e3ad9b93f4175b0d1b439e6723)
                    mstore(add(transcript, 0x75a0), 0x1866a3b6d312d1ea92e911459b6d15a8e48c37a75c9fc1705371dfba24395e59)
mstore(add(transcript, 0x75c0), mload(add(transcript, 0x6ac0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7580), 0x60, add(transcript, 0x7580), 0x40), 1), success)
mstore(add(transcript, 0x75e0), mload(add(transcript, 0x7500)))
                    mstore(add(transcript, 0x7600), mload(add(transcript, 0x7520)))
mstore(add(transcript, 0x7620), mload(add(transcript, 0x7580)))
                    mstore(add(transcript, 0x7640), mload(add(transcript, 0x75a0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x75e0), 0x80, add(transcript, 0x75e0), 0x40), 1), success)
mstore(add(transcript, 0x7660), mload(add(transcript, 0xec0)))
                    mstore(add(transcript, 0x7680), mload(add(transcript, 0xee0)))
mstore(add(transcript, 0x76a0), mload(add(transcript, 0x6ae0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7660), 0x60, add(transcript, 0x7660), 0x40), 1), success)
mstore(add(transcript, 0x76c0), mload(add(transcript, 0x75e0)))
                    mstore(add(transcript, 0x76e0), mload(add(transcript, 0x7600)))
mstore(add(transcript, 0x7700), mload(add(transcript, 0x7660)))
                    mstore(add(transcript, 0x7720), mload(add(transcript, 0x7680)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x76c0), 0x80, add(transcript, 0x76c0), 0x40), 1), success)
mstore(add(transcript, 0x7740), mload(add(transcript, 0xf00)))
                    mstore(add(transcript, 0x7760), mload(add(transcript, 0xf20)))
mstore(add(transcript, 0x7780), mload(add(transcript, 0x6b00)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7740), 0x60, add(transcript, 0x7740), 0x40), 1), success)
mstore(add(transcript, 0x77a0), mload(add(transcript, 0x76c0)))
                    mstore(add(transcript, 0x77c0), mload(add(transcript, 0x76e0)))
mstore(add(transcript, 0x77e0), mload(add(transcript, 0x7740)))
                    mstore(add(transcript, 0x7800), mload(add(transcript, 0x7760)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x77a0), 0x80, add(transcript, 0x77a0), 0x40), 1), success)
mstore(add(transcript, 0x7820), mload(add(transcript, 0xf40)))
                    mstore(add(transcript, 0x7840), mload(add(transcript, 0xf60)))
mstore(add(transcript, 0x7860), mload(add(transcript, 0x6b20)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7820), 0x60, add(transcript, 0x7820), 0x40), 1), success)
mstore(add(transcript, 0x7880), mload(add(transcript, 0x77a0)))
                    mstore(add(transcript, 0x78a0), mload(add(transcript, 0x77c0)))
mstore(add(transcript, 0x78c0), mload(add(transcript, 0x7820)))
                    mstore(add(transcript, 0x78e0), mload(add(transcript, 0x7840)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7880), 0x80, add(transcript, 0x7880), 0x40), 1), success)
mstore(add(transcript, 0x7900), mload(add(transcript, 0xf80)))
                    mstore(add(transcript, 0x7920), mload(add(transcript, 0xfa0)))
mstore(add(transcript, 0x7940), mload(add(transcript, 0x6b40)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7900), 0x60, add(transcript, 0x7900), 0x40), 1), success)
mstore(add(transcript, 0x7960), mload(add(transcript, 0x7880)))
                    mstore(add(transcript, 0x7980), mload(add(transcript, 0x78a0)))
mstore(add(transcript, 0x79a0), mload(add(transcript, 0x7900)))
                    mstore(add(transcript, 0x79c0), mload(add(transcript, 0x7920)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7960), 0x80, add(transcript, 0x7960), 0x40), 1), success)
mstore(add(transcript, 0x79e0), mload(add(transcript, 0xe20)))
                    mstore(add(transcript, 0x7a00), mload(add(transcript, 0xe40)))
mstore(add(transcript, 0x7a20), mload(add(transcript, 0x6b60)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x79e0), 0x60, add(transcript, 0x79e0), 0x40), 1), success)
mstore(add(transcript, 0x7a40), mload(add(transcript, 0x7960)))
                    mstore(add(transcript, 0x7a60), mload(add(transcript, 0x7980)))
mstore(add(transcript, 0x7a80), mload(add(transcript, 0x79e0)))
                    mstore(add(transcript, 0x7aa0), mload(add(transcript, 0x7a00)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7a40), 0x80, add(transcript, 0x7a40), 0x40), 1), success)
mstore(add(transcript, 0x7ac0), mload(add(transcript, 0x1340)))
                    mstore(add(transcript, 0x7ae0), mload(add(transcript, 0x1360)))
mstore(add(transcript, 0x7b00), sub(f_q, mload(add(transcript, 0x6ba0))))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7ac0), 0x60, add(transcript, 0x7ac0), 0x40), 1), success)
mstore(add(transcript, 0x7b20), mload(add(transcript, 0x7a40)))
                    mstore(add(transcript, 0x7b40), mload(add(transcript, 0x7a60)))
mstore(add(transcript, 0x7b60), mload(add(transcript, 0x7ac0)))
                    mstore(add(transcript, 0x7b80), mload(add(transcript, 0x7ae0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7b20), 0x80, add(transcript, 0x7b20), 0x40), 1), success)
mstore(add(transcript, 0x7ba0), mload(add(transcript, 0x13e0)))
                    mstore(add(transcript, 0x7bc0), mload(add(transcript, 0x1400)))
mstore(add(transcript, 0x7be0), mload(add(transcript, 0x6bc0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7ba0), 0x60, add(transcript, 0x7ba0), 0x40), 1), success)
mstore(add(transcript, 0x7c00), mload(add(transcript, 0x7b20)))
                    mstore(add(transcript, 0x7c20), mload(add(transcript, 0x7b40)))
mstore(add(transcript, 0x7c40), mload(add(transcript, 0x7ba0)))
                    mstore(add(transcript, 0x7c60), mload(add(transcript, 0x7bc0)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7c00), 0x80, add(transcript, 0x7c00), 0x40), 1), success)
mstore(add(transcript, 0x7c80), mload(add(transcript, 0x7c00)))
                    mstore(add(transcript, 0x7ca0), mload(add(transcript, 0x7c20)))
mstore(add(transcript, 0x7cc0), mload(add(transcript, 0x13e0)))
                    mstore(add(transcript, 0x7ce0), mload(add(transcript, 0x1400)))
mstore(add(transcript, 0x7d00), mload(add(transcript, 0x1420)))
                    mstore(add(transcript, 0x7d20), mload(add(transcript, 0x1440)))
mstore(add(transcript, 0x7d40), mload(add(transcript, 0x1460)))
                    mstore(add(transcript, 0x7d60), mload(add(transcript, 0x1480)))
mstore(add(transcript, 0x7d80), keccak256(add(transcript, 0x7c80), 256))
mstore(add(transcript, 0x7da0), mod(mload(32128), f_q))
mstore(add(transcript, 0x7dc0), mulmod(mload(add(transcript, 0x7da0)), mload(add(transcript, 0x7da0)), f_q))
mstore(add(transcript, 0x7de0), mulmod(1, mload(add(transcript, 0x7da0)), f_q))
mstore(add(transcript, 0x7e00), mload(add(transcript, 0x7d00)))
                    mstore(add(transcript, 0x7e20), mload(add(transcript, 0x7d20)))
mstore(add(transcript, 0x7e40), mload(add(transcript, 0x7de0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7e00), 0x60, add(transcript, 0x7e00), 0x40), 1), success)
mstore(add(transcript, 0x7e60), mload(add(transcript, 0x7c80)))
                    mstore(add(transcript, 0x7e80), mload(add(transcript, 0x7ca0)))
mstore(add(transcript, 0x7ea0), mload(add(transcript, 0x7e00)))
                    mstore(add(transcript, 0x7ec0), mload(add(transcript, 0x7e20)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7e60), 0x80, add(transcript, 0x7e60), 0x40), 1), success)
mstore(add(transcript, 0x7ee0), mload(add(transcript, 0x7d40)))
                    mstore(add(transcript, 0x7f00), mload(add(transcript, 0x7d60)))
mstore(add(transcript, 0x7f20), mload(add(transcript, 0x7de0)))
success := and(eq(staticcall(gas(), 0x7, add(transcript, 0x7ee0), 0x60, add(transcript, 0x7ee0), 0x40), 1), success)
mstore(add(transcript, 0x7f40), mload(add(transcript, 0x7cc0)))
                    mstore(add(transcript, 0x7f60), mload(add(transcript, 0x7ce0)))
mstore(add(transcript, 0x7f80), mload(add(transcript, 0x7ee0)))
                    mstore(add(transcript, 0x7fa0), mload(add(transcript, 0x7f00)))
success := and(eq(staticcall(gas(), 0x6, add(transcript, 0x7f40), 0x80, add(transcript, 0x7f40), 0x40), 1), success)
mstore(add(transcript, 0x7fc0), mload(add(transcript, 0x7e60)))
                    mstore(add(transcript, 0x7fe0), mload(add(transcript, 0x7e80)))
mstore(add(transcript, 0x8000), 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(add(transcript, 0x8020), 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(add(transcript, 0x8040), 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(add(transcript, 0x8060), 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(add(transcript, 0x8080), mload(add(transcript, 0x7f40)))
                    mstore(add(transcript, 0x80a0), mload(add(transcript, 0x7f60)))
mstore(add(transcript, 0x80c0), 0x0181624e80f3d6ae28df7e01eaeab1c0e919877a3b8a6b7fbc69a6817d596ea2)
            mstore(add(transcript, 0x80e0), 0x1783d30dcb12d259bb89098addf6280fa4b653be7a152542a28f7b926e27e648)
            mstore(add(transcript, 0x8100), 0x00ae44489d41a0d179e2dfdc03bddd883b7109f8b6ae316a59e815c1a6b35304)
            mstore(add(transcript, 0x8120), 0x0b2147ab62a386bd63e6de1522109b8c9588ab466f5aadfde8c41ca3749423ee)
success := and(eq(staticcall(gas(), 0x8, add(transcript, 0x7fc0), 0x180, add(transcript, 0x7fc0), 0x20), 1), success)
success := and(eq(mload(add(transcript, 0x7fc0)), 1), success)

        }}
        return (success, transcript);
    }
}
